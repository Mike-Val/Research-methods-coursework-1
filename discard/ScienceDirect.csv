Key,Item Type,Publication Year,Author,Title,Publication Title,ISBN,ISSN,DOI,Url,Abstract Note,Date,Date Added,Date Modified,Access Date,Pages,Num Pages,Issue,Volume,Number Of Volumes,Journal Abbreviation,Short Title,Series,Series Number,Series Text,Series Title,Publisher,Place,Language,Rights,Type,Archive,Archive Location,Library Catalog,Call Number,Extra,Notes,File Attachments,Link Attachments,Manual Tags,Automatic Tags,Editor,Series Editor,Translator,Contributor,Attorney Agent,Book Author,Cast Member,Commenter,Composer,Cosponsor,Counsel,Interviewer,Producer,Recipient,Reviewed Author,Scriptwriter,Words By,Guest,Number,Edition,Running Time,Scale,Medium,Artwork Size,Filing Date,Application Number,Assignee,Issuing Authority,Country,Meeting Name,Conference Name,Court,References,Reporter,Legal Status,Priority Numbers,Programming Language,Version,System,Code,Code Number,Section,Session,Committee,History,Legislative Body
Z8PKWLE5,journalArticle,2022,"Zhao, Zhehao; Yang, Bo; Li, Ge; Liu, Huai; Jin, Zhi",Precise Learning of Source Code Contextual Semantics via Hierarchical Dependence Structure and Graph Attention Networks,Journal of Systems and Software,,0164-1212,https://doi.org/10.1016/j.jss.2021.111108,https://www.sciencedirect.com/science/article/pii/S0164121221002053,"Deep learning is being used extensively in a variety of software engineering tasks, e.g., program classification and defect prediction. Although the technique eliminates the required process of feature engineering, the construction of source code model significantly affects the performance on those tasks. Most recent works was mainly focused on complementing AST-based source code models by introducing contextual dependencies extracted from CFG. However, all of them pay little attention to the representation of basic blocks, which are the basis of contextual dependencies. In this paper, we integrated AST and CFG and proposed a novel source code model embedded with hierarchical dependencies. Based on that, we also designed a neural network that depends on the graph attention mechanism. Specifically, we introduced the syntactic structural of the basic block, i.e., its corresponding AST, in source code model to provide sufficient information and fill the gap. We have evaluated this model on three practical software engineering tasks and compared it with other state-of-the-art methods. The results show that our model can significantly improve the performance. For example, compared to the best performing baseline, our model reduces the scale of parameters by 50% and achieves 4% improvement on accuracy on program classification task.",2022,2022-10-16 23:12:05,2022-10-16 23:12:05,,111108,,,184,,,,,,,,,,,,,,,,,,,,,Deep learning; Abstract syntax Tree; Control flow graph; Graph neural network; Program analysis,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Y269EDVJ,journalArticle,2019,"Zhou, Pingyi; Liu, Jin; Liu, Xiao; Yang, Zijiang; Grundy, John",Is deep learning better than traditional approaches in tag recommendation for software information sites?,Information and Software Technology,,0950-5849,https://doi.org/10.1016/j.infsof.2019.01.002,https://www.sciencedirect.com/science/article/pii/S0950584919300047,"Context Inspired by the success of deep learning in other domains, this new technique been gaining widespread recent interest in being applied to diverse data analysis problems in software engineering. Many deep learning models, such as CNN, DBN, RNN, LSTM and GAN, have been proposed and recently applied to software engineering tasks including effort estimation, vulnerability analysis, code clone detection, test case selection, requirements analysis and many others. However, there is a perception that applying deep learning is a ”silver bullet” if it can be applied to a software engineering data analysis problem. Object This motivated us to ask the question as to whether deep learning is better than traditional approaches in tag recommendation task for software information sites. Method In this paper we test this question by applying both the latest deep learning approaches and some traditional approaches on tag recommendation task for software information sites. This is a typical Software Engineering automation problem where intensive data processing is required to link disparate information to assist developers. Four different deep learning approaches – TagCNN, TagRNN, TagHAN and TagRCNN – are implemented and compared with three advanced traditional approaches – EnTagRec, TagMulRec, and FastTagRec. Results Our comprehensive experimental results show that the performance of these different deep learning approaches varies significantly. The performance of TagRNN and TagHAN approaches are worse than traditional approaches in tag recommendation tasks. The performance of TagCNN and TagRCNN approaches are better than traditional approaches in tag recommendation tasks. Conclusion Therefore, using appropriate deep learning approaches can indeed achieve better performance than traditional approaches in tag recommendation tasks for software information sites.",2019,2022-10-16 23:12:05,2022-10-16 23:12:05,,1-13,,,109,,,,,,,,,,,,,,,,,,,,,Deep learning; Data analysis; Software information site; Software object; Tag recommendation,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
UTVX5UWZ,journalArticle,2022,"Jiang, Yuan; Su, Xiaohong; Treude, Christoph; Wang, Tiantian",Hierarchical semantic-aware neural code representation,Journal of Systems and Software,,0164-1212,https://doi.org/10.1016/j.jss.2022.111355,https://www.sciencedirect.com/science/article/pii/S0164121222000887,"Code representation is a fundamental problem in many software engineering tasks. Despite the effort made by many researchers, it is still hard for existing methods to fully extract syntactic, structural and sequential features of source code, which form the hierarchical semantics of the program and are necessary to achieve a deeper code understanding. To alleviate this difficulty, we propose a new supervised approach based on the novel use of Tree-LSTM to incorporate the sequential and the global semantic features of programs explicitly into the representation model. Unlike previous techniques, our proposed model can not only learn low-level syntactic information within each statement but also the high-level semantic information between statements over the constructed semantic graph. Besides, considering that the sequential semantics is also critical for developers to understand the dependency path and data flow transmission, we propose a DFS-based method to generate the topological order of statements being processed, and then feed them as well as their in-neighboring information and syntactic embeddings into the proposed model to learn richer statement-level semantic features. Extensive experiments on multiple program comprehension tasks, e.g., code clone detection, demonstrate that our method achieves promising performance compared with other existing baselines.",2022,2022-10-16 23:12:05,2022-10-16 23:12:05,,111355,,,191,,,,,,,,,,,,,,,,,,,,,Deep learning; Clone detection; Code representation; Graph-LSTM; Hierarchical semantics; Program classification; Vulnerability detection,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
