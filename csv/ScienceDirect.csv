"Key","Item Type","Publication Year","Author","Title","Publication Title","ISBN","ISSN","DOI","Url","Abstract Note","Date","Date Added","Date Modified","Access Date","Pages","Num Pages","Issue","Volume","Number Of Volumes","Journal Abbreviation","Short Title","Series","Series Number","Series Text","Series Title","Publisher","Place","Language","Rights","Type","Archive","Archive Location","Library Catalog","Call Number","Extra","Notes","File Attachments","Link Attachments","Manual Tags","Automatic Tags","Editor","Series Editor","Translator","Contributor","Attorney Agent","Book Author","Cast Member","Commenter","Composer","Cosponsor","Counsel","Interviewer","Producer","Recipient","Reviewed Author","Scriptwriter","Words By","Guest","Number","Edition","Running Time","Scale","Medium","Artwork Size","Filing Date","Application Number","Assignee","Issuing Authority","Country","Meeting Name","Conference Name","Court","References","Reporter","Legal Status","Priority Numbers","Programming Language","Version","System","Code","Code Number","Section","Session","Committee","History","Legislative Body"
"UTVX5UWZ","journalArticle","2022","Jiang, Yuan; Su, Xiaohong; Treude, Christoph; Wang, Tiantian","Hierarchical semantic-aware neural code representation","Journal of Systems and Software","","0164-1212","https://doi.org/10.1016/j.jss.2022.111355","https://www.sciencedirect.com/science/article/pii/S0164121222000887","Code representation is a fundamental problem in many software engineering tasks. Despite the effort made by many researchers, it is still hard for existing methods to fully extract syntactic, structural and sequential features of source code, which form the hierarchical semantics of the program and are necessary to achieve a deeper code understanding. To alleviate this difficulty, we propose a new supervised approach based on the novel use of Tree-LSTM to incorporate the sequential and the global semantic features of programs explicitly into the representation model. Unlike previous techniques, our proposed model can not only learn low-level syntactic information within each statement but also the high-level semantic information between statements over the constructed semantic graph. Besides, considering that the sequential semantics is also critical for developers to understand the dependency path and data flow transmission, we propose a DFS-based method to generate the topological order of statements being processed, and then feed them as well as their in-neighboring information and syntactic embeddings into the proposed model to learn richer statement-level semantic features. Extensive experiments on multiple program comprehension tasks, e.g., code clone detection, demonstrate that our method achieves promising performance compared with other existing baselines.","2022","2022-10-16 23:12:05","2022-10-16 23:12:05","","111355","","","191","","","","","","","","","","","","","","","","","","","","","Deep learning; Clone detection; Code representation; Graph-LSTM; Hierarchical semantics; Program classification; Vulnerability detection","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""
"SFFH9Q2Q","journalArticle","2022","Lei, Maggie; Li, Hao; Li, Ji; Aundhkar, Namrata; Kim, Dae-Kyoo","Deep learning application on code clone detection: A review of current knowledge","Journal of Systems and Software","","0164-1212","https://doi.org/10.1016/j.jss.2021.111141","https://www.sciencedirect.com/science/article/pii/S0164121221002387","Bad smells in code are indications of low code quality representing potential threats to the maintainability and reusability of software. Code clone is a type of bad smells caused by code fragments that have the same functional semantics with syntactic variations. In the recent years, the research on duplicate code has been dramatically geared up by deep learning techniques powered by advances in computing power. However, there exists little work studying the current state-of-art and future prospects in the area of applying deep learning to code clone detection. In this paper, we present a systematic review of the literature on the application of deep learning on code clone detection. We aim to find and study the most recent work on the subject, discuss their limitations and challenges, and provide insights on the future work.","2022","2022-10-16 23:12:05","2022-10-16 23:12:05","","111141","","","184","","","","","","","","","","","","","","","","","","","","","Machine learning; Deep learning; Code clone; Code smell; Duplicate code; Literature review","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""
"6QKD5VZ2","journalArticle","2022","Yu, Shiwen; Wang, Ting; Wang, Ji","Data Augmentation by Program Transformation","Journal of Systems and Software","","0164-1212","https://doi.org/10.1016/j.jss.2022.111304","https://www.sciencedirect.com/science/article/pii/S0164121222000541","Data Augmentation has been recognized as one of the main techniques to improve deep learning models’ generalization ability. However, it has not been widely leveraged in big code tasks due to the essential difficulties of manipulating source code to generate new labeled data of high quality. In this paper, we propose a general data augmentation method based on program transformation. The idea is to extend big code datasets by a set of source-to-source transformation rules that preserve not only the semantics but also the syntactic naturalness of programs. Through controlled experiments, we demonstrated that semantic and syntax-naturalness preserving are the expected properties for a transformation rule to be effective in data augmentation. We designed 18 transformation rules that are proved semantic-preserving and tested syntax-naturalness-preserving. We also implemented and open-sourced a partial program transformation tool for Java based on the rules, named SPAT, whose effectiveness for data augmentation is validated in three big code tasks: method naming, code commenting, and code clone detection. Editor’s note: Open Science material was validated by the Journal of Systems and Software Open Science Board.","2022","2022-10-16 23:12:05","2022-10-16 23:12:05","","111304","","","190","","","","","","","","","","","","","","","","","","","","","Big Code; Data Augmentation; Program Transformation","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""
"2ZCAZY99","journalArticle","2018","Kim, Seulbae; Lee, Heejo","Software systems at risk: An empirical study of cloned vulnerabilities in practice","Computers & Security","","0167-4048","https://doi.org/10.1016/j.cose.2018.02.007","https://www.sciencedirect.com/science/article/pii/S0167404818300944","With the growth of open source software (OSS), code clones – code fragments that are copied and pasted within or between software systems – are proliferating. Although code cloning may expedite the process of software development, it often critically affects the security of software because vulnerabilities and bugs can easily be propagated through code clones. These vulnerable code clones are increasing in conjunction with the growth of OSS, potentially contaminating many systems. Although researchers have attempted to detect code clones for decades, most of these attempts fail to scale to the size of the ever-growing OSS code base. The lack of scalability prevents software developers from readily managing code clones and associated vulnerabilities. Moreover, most existing clone detection techniques focus overly on merely detecting clones and this impairs their ability to accurately find “vulnerable” clones. In this paper, we propose VUDDY, an approach for the scalable detection of vulnerable code clones, which is capable of detecting security vulnerabilities in large software programs efficiently and accurately. Its extreme scalability is achieved by leveraging function-level granularity and a length-filtering technique that reduces the number of signature comparisons. This efficient design enables VUDDY to preprocess a billion lines of code in 14 hours and 17 minutes, after which it requires a few seconds to identify code clones. In addition, we designed a vulnerability-preserving abstraction technique that renders VUDDY resilient to common modifications in cloned code, while preserving the vulnerable conditions even after the abstraction is applied. This extends the scope of VUDDY to identifying variants of known vulnerabilities, with high accuracy. An implementation of VUDDY has been serviced online for free at IoTcube, an automated vulnerability detection platform. In this study, we describe its principles, evaluate its efficacy, and analyze the vulnerabilities VUDDY detected in various real-world software systems, such as Apache HTTPD server and an Android smartphone.","2018","2022-10-16 23:12:05","2022-10-16 23:12:05","","720-736","","","77","","","","","","","","","","","","","","","","","","","","","Code clone detection; Open source software; Software vulnerability; Vulnerability exploitation; Vulnerability propagation","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""
"FHQIG4BT","journalArticle","2021","Sheneamer, Abdullah M.","Multiple Similarity-based Features Blending for Detecting Code Clones using Consensus-Driven Classification","Expert Systems with Applications","","0957-4174","https://doi.org/10.1016/j.eswa.2021.115364","https://www.sciencedirect.com/science/article/pii/S0957417421007922","Code clone detection helps to reduce the costs associated with software maintenance and bug prevention. Machine learning methods have previously suggested many ways by which to detect code clones. The majority of clone detectors are traditional in their approach, they can detect syntactic clones but are poor at detecting semantic clones. Researchers use machine learning to detect semantic clones and automatically scan the data to learn latent semantic features. In this study, we have introduced a new formal model of similarity which combines similarity measures so that method blocks can measure both the syntactic and semantic distances between method block pairs. The uniqueness of our study is in the use of different similarity measures, and similarity scores as features in machine learning, to detect code clones. We use a number of similarity measure computations to extract similarity score features, these features are then represented as vectors. Using ensemble classification models, we perform extensive comparisons and evaluations of the effectiveness of our proposed idea. The results indicate that our approach is significantly better at detecting clone types compared to contemporary code clone detectors. We achieved a 99% success rate in detecting cloned codes based on F-score, recall, and precision. Our approach achieves 98–100% accuracy in the majority of cases.","2021","2022-10-16 23:12:05","2022-10-16 23:12:05","","115364","","","183","","","","","","","","","","","","","","","","","","","","","Machine learning; Semantic clones; Classification; Code clones; Features; Similarity measures; Software engineering; Syntactic clones","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""
"KFDX3HSK","journalArticle","2018","Nishi, Manziba Akanda; Damevski, Kostadin","Scalable code clone detection and search based on adaptive prefix filtering","Journal of Systems and Software","","0164-1212","https://doi.org/10.1016/j.jss.2017.11.039","https://www.sciencedirect.com/science/article/pii/S0164121217302790","Code clone detection is a well-known software engineering problem that aims to detect all the groups of code blocks or code fragments that are functionally equivalent in a code base. It has numerous and wide ranging important uses in areas such as software metrics, plagiarism detection, aspect mining, copyright infringement investigation, code compaction, virus detection, and detecting bugs. A scalable code clone detection technique, able to process large source code repositories, is crucial in the context of multi-project or Internet-scale code clone detection scenarios. In this paper, we focus on improving the scalability of code clone detection, relative to current state of the art techniques. Our adaptive prefix filtering technique improves the performance of code clone detection for many common execution parameters, when tested on common benchmarks. The experimental results exhibit improvements for commonly used similarity thresholds of between 40% and 80%, in the best case decreasing the execution time up to 11% and increasing the number of filtered candidates up to 63%.","2018","2022-10-16 23:12:05","2022-10-16 23:12:05","","130-142","","","137","","","","","","","","","","","","","","","","","","","","","Code clone detection; Prefix filtering; Software maintenance","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""
"U5SPT6J5","journalArticle","2018","Sheneamer, Abdullah; Roy, Swarup; Kalita, Jugal","A detection framework for semantic code clones and obfuscated code","Expert Systems with Applications","","0957-4174","https://doi.org/10.1016/j.eswa.2017.12.040","https://www.sciencedirect.com/science/article/pii/S0957417417308631","Code obfuscation is a staple tool in malware creation where code fragments are altered substantially to make them appear different from the original, while keeping the semantics unaffected. A majority of the obfuscated code detection methods use program structure as a signature for detection of unknown codes. They usually ignore the most important feature, which is the semantics of the code, to match two code fragments or programs for obfuscation. Obfuscated code detection is a special case of the semantic code clone detection task. We propose a detection framework for detecting both code obfuscation and clone using machine learning. We use features extracted from Java bytecode dependency graphs (BDG), program dependency graphs (PDG) and abstract syntax trees (AST). BDGs and PDGs are two representations of the semantics or meaning of a Java program. ASTs capture the structural aspects of a program. We use several publicly available code clone and obfuscated code datasets to validate the effectiveness of our framework. We use different assessment parameters to evaluate the detection quality of our proposed model. Experimental results are excellent when compared with contemporary obfuscated code and code clone detectors. Interestingly, we achieve 100% success in detecting obfuscated code based on recall, precision, and F1-Score. When we compare our method with other methods for all of obfuscations types, viz, contraction, expansion, loop transformation and renaming, our model appears to be the winner. In case of clone detection our model achieve very high detection accuracy in comparison to other similar detectors.","2018","2022-10-16 23:12:05","2022-10-16 23:12:05","","405-420","","","97","","","","","","","","","","","","","","","","","","","","","Machine learning; Bytecode dependency graph; Code obfuscation; Program dependency graph; Semantic code clones","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""
"Z8PKWLE5","journalArticle","2022","Zhao, Zhehao; Yang, Bo; Li, Ge; Liu, Huai; Jin, Zhi","Precise Learning of Source Code Contextual Semantics via Hierarchical Dependence Structure and Graph Attention Networks","Journal of Systems and Software","","0164-1212","https://doi.org/10.1016/j.jss.2021.111108","https://www.sciencedirect.com/science/article/pii/S0164121221002053","Deep learning is being used extensively in a variety of software engineering tasks, e.g., program classification and defect prediction. Although the technique eliminates the required process of feature engineering, the construction of source code model significantly affects the performance on those tasks. Most recent works was mainly focused on complementing AST-based source code models by introducing contextual dependencies extracted from CFG. However, all of them pay little attention to the representation of basic blocks, which are the basis of contextual dependencies. In this paper, we integrated AST and CFG and proposed a novel source code model embedded with hierarchical dependencies. Based on that, we also designed a neural network that depends on the graph attention mechanism. Specifically, we introduced the syntactic structural of the basic block, i.e., its corresponding AST, in source code model to provide sufficient information and fill the gap. We have evaluated this model on three practical software engineering tasks and compared it with other state-of-the-art methods. The results show that our model can significantly improve the performance. For example, compared to the best performing baseline, our model reduces the scale of parameters by 50% and achieves 4% improvement on accuracy on program classification task.","2022","2022-10-16 23:12:05","2022-10-16 23:12:05","","111108","","","184","","","","","","","","","","","","","","","","","","","","","Deep learning; Abstract syntax Tree; Control flow graph; Graph neural network; Program analysis","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""
"WFPMVRQC","journalArticle","2018","Saini, Neha; Singh, Sukhdip; Suman","Code Clones: Detection and Management","Procedia Computer Science","","1877-0509","https://doi.org/10.1016/j.procs.2018.05.080","https://www.sciencedirect.com/science/article/pii/S1877050918308123","In a software system, similar or identical fragments of code are known as code clones. Instead of implementing a new code from scratch, most of the developers prefer copy–paste programming in which they use existing code fragments. So, the primary reason behind code cloning isboth developers and programming languages used by them. Reusing existing software for increasing software productivity is a key element of object oriented programming which makes clone detection and management a primary concern for current industry. As a software system grows, it becomes more complex which leads to difficulty in maintaining it. The main reason behind difficulty in software maintenance is code clones which do not lead to conclusion that code clones are only harmful for software development. Code clones can be both advantageous and disastrous for software development. Therefore, clones should be analysed before refactoring or removing them. For analysing the clones properly, there is a need to study all the clone detection techniques, various types of clones and techniques to manage them.The main purpose of this paper is to gain insight in to the research available in the area of clone detection and management and identify the research gaps to work upon. It will help the researchers to get started easily with clones as they can study the basic concepts, techniques, general steps for code clone detection and management and research gaps together at one place. Also, it will help in the selection of appropriate techniques for detecting and managing clones as comparative analysis of different techniques on the basis of various parameters is also given in the paper.","2018","2022-10-16 23:12:05","2022-10-16 23:12:05","","718-727","","","132","","","","","","","","","","","","","","","","","","","","","Clone Management; Bad Smell; Bug Detection; Clone Detection; Clone Lifecycle; Clone Refactoring; Software Maintenance","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""
"ZT8XURGB","journalArticle","2022","Yu, Yaoshen; Huang, Zhiqiu; Shen, Guohua; Li, Weiwei; Shao, Yichao","ASTENS-BWA: Searching partial syntactic similar regions between source code fragments via AST-based encoded sequence alignment","Science of Computer Programming","","0167-6423","https://doi.org/10.1016/j.scico.2022.102839","https://www.sciencedirect.com/science/article/pii/S0167642322000727","Code search is a common activity in software development, and code-to-code search can benefit in a wide range of use-case scenarios. Code-to-code search uses a code fragment as the query for searching similar code fragments from large corpora. The results of a search can be applied to some software engineering tasks, such as search-based code recommendation, data-driven program repairing, and software plagiarism detection. To be put into daily use, the code-to-code search needs to find similar code fragments accurately and efficiently in a large dataset. Some search engines can locate exactly similar code, but are not able to search syntactical clones. Therefore, we propose ASTENS-BWA, a novel approach for searching syntactic similar code regions between code fragments via a tree-based sequence alignment. Source code has been transformed into a tree-based sequence that contains the structure information, and a sequence alignment algorithm has been applied to find similar regions. We evaluate ASTENS-BWA on three different tasks, the results demonstrate that our approach can find syntactical similar regions for programming code and retrieve similar code fragments fast and with high accuracy. As a code clone detection tool, ASTENS-BWA can report clone pairs in a high recall, but it needs manually check to reduce the false alarms. ASTENS-BWA is scalable and can report cloned code fragments in seconds for a code corpus of million lines of code.","2022","2022-10-16 23:12:05","2022-10-16 23:12:05","","102839","","","222","","","","","","","","","","","","","","","","","","","","","Abstract syntax tree; Code clone search; Code representation model; Sequence alignment algorithm; Syntactical similarity","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""
"EU8FFJCV","journalArticle","2020","Mostaeen, Golam; Roy, Banani; Roy, Chanchal K.; Schneider, Kevin; Svajlenko, Jeffrey","A machine learning based framework for code clone validation","Journal of Systems and Software","","0164-1212","https://doi.org/10.1016/j.jss.2020.110686","https://www.sciencedirect.com/science/article/pii/S0164121220301394","A code clone is a pair of code fragments, within or between software systems that are similar. Since code clones often negatively impact the maintainability of a software system, several code clone detection techniques and tools have been proposed and studied over the last decade. However, the clone detection tools are not always perfect and their clone detection reports often contain a number of false positives or irrelevant clones from specific project management or user perspective. To detect all possible similar source code patterns in general, the clone detection tools work on the syntax level while lacking user-specific preferences. This often means the clones must be manually inspected before analysis in order to remove those false positives from consideration. This manual clone validation effort is very time-consuming and often error-prone, in particular for large-scale clone detection. In this paper, we propose a machine learning approach for automating the validation process. First, a training dataset is built by taking code clones from several clone detection tools for different subject systems and then manually validating those clones. Second, several features are extracted from those clones to train the machine learning model by the proposed approach. The trained algorithm is then used to automatically validate clones without human inspection. Thus the proposed approach can be used to remove the false positive clones from the detection results, automatically evaluate the precision of any clone detectors for any given set of datasets, evaluate existing clone benchmark datasets, or even be used to build new clone benchmarks and datasets with minimum effort. In an experiment with clones detected by several clone detectors in several different software systems, we found our approach has an accuracy of up to 87.4% when compared against the manual validation by multiple expert judges. The proposed method also shows better results in several comparative studies with the existing related approaches for clone classification.","2020","2022-10-16 23:12:05","2022-10-16 23:12:05","","110686","","","169","","","","","","","","","","","","","","","","","","","","","Machine learning; Validation; Code clones; Clone management","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""
"Y269EDVJ","journalArticle","2019","Zhou, Pingyi; Liu, Jin; Liu, Xiao; Yang, Zijiang; Grundy, John","Is deep learning better than traditional approaches in tag recommendation for software information sites?","Information and Software Technology","","0950-5849","https://doi.org/10.1016/j.infsof.2019.01.002","https://www.sciencedirect.com/science/article/pii/S0950584919300047","Context Inspired by the success of deep learning in other domains, this new technique been gaining widespread recent interest in being applied to diverse data analysis problems in software engineering. Many deep learning models, such as CNN, DBN, RNN, LSTM and GAN, have been proposed and recently applied to software engineering tasks including effort estimation, vulnerability analysis, code clone detection, test case selection, requirements analysis and many others. However, there is a perception that applying deep learning is a ”silver bullet” if it can be applied to a software engineering data analysis problem. Object This motivated us to ask the question as to whether deep learning is better than traditional approaches in tag recommendation task for software information sites. Method In this paper we test this question by applying both the latest deep learning approaches and some traditional approaches on tag recommendation task for software information sites. This is a typical Software Engineering automation problem where intensive data processing is required to link disparate information to assist developers. Four different deep learning approaches – TagCNN, TagRNN, TagHAN and TagRCNN – are implemented and compared with three advanced traditional approaches – EnTagRec, TagMulRec, and FastTagRec. Results Our comprehensive experimental results show that the performance of these different deep learning approaches varies significantly. The performance of TagRNN and TagHAN approaches are worse than traditional approaches in tag recommendation tasks. The performance of TagCNN and TagRCNN approaches are better than traditional approaches in tag recommendation tasks. Conclusion Therefore, using appropriate deep learning approaches can indeed achieve better performance than traditional approaches in tag recommendation tasks for software information sites.","2019","2022-10-16 23:12:05","2022-10-16 23:12:05","","1-13","","","109","","","","","","","","","","","","","","","","","","","","","Deep learning; Data analysis; Software information site; Software object; Tag recommendation","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""