Document Title,Authors,Author Affiliations,Publication Title,Date Added To Xplore,Publication Year,Volume,Issue,Start Page,End Page,Abstract,ISSN,ISBNs,DOI,Funding Information,PDF Link,Author Keywords,IEEE Terms,INSPEC Controlled Terms,INSPEC Non-Controlled Terms,Mesh_Terms,Article Citation Count,Patent Citation Count,Reference Count,License,Online Date,Issue Date,Meeting Date,Publisher,Document Identifier
Comparison between Code Clone Detection and Model Clone Detection,G. Shobha; A. Rana; V. Kansal; S. Tanwar,"Amity Institute of Information Technology, Amity University, Uttar Pradesh, India; Amity Institute of Information Technology, Amity University, Uttar Pradesh, India; Institute of Engineering and Technology, Dr APJ Abdul Kalam Technical Univerity, Lucknow, Uttar Pradesh, India; Amity Institute of Information Technology, Amity University, Uttar Pradesh, India","2021 9th International Conference on Reliability, Infocom Technologies and Optimization (Trends and Future Directions) (ICRITO)",15 Nov 2021,2021,,,1,5,"In software, clones are syntactically or semantically identical of two code fragments. Cloning by either deliberately or by coincidence. Cloning has pros and cons in software development. Bug propagation may be caused by cloning from original to copied segments. Cloning may lead to difficulties in software maintenance. Cloning is helpful in many functions like code reusability, inheritance, and libraries. Software developers before scripting the code design the model for it. Cloning can exist at any stage either at the design or coding phase, which influences on development, quality, and maintenance of the software. All software has constraints like budget and time are associated. In software development, life cycle budget and time constraints depend on irregularity and risk. These irregularities and risks can be minimized by identifying clones. There are different kinds of clones in Code and Model. In this paper, we present a concise summary of design and coding phase clone detection of these irregularities and risk as well as their for's and against of code clone detection and model clone detection.",,978-1-6654-1703-7,10.1109/ICRITO51393.2021.9596454,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9596454,Software clone;Code clone;model clone;Code Clone detection;Model clone detection,Computer languages;Software maintenance;Codes;Redundancy;Cloning;Software systems;Software,C language;software maintenance;software reusability,model clone detection;code clone detection;code fragments;software development;software maintenance;code design;coding phase clone detection;code reusability;software quality,,,,21.0,IEEE,15 Nov 2021,,,IEEE,IEEE Conferences
SCCD-GAN: An Enhanced Semantic Code Clone Detection Model Using GAN,K. Xu; Y. Liu,"School of Software Engineering, Tongji University, Cao’an Highway 4800, Shanghai, China; School of Software Engineering, Tongji University, Cao’an Highway 4800, Shanghai, China",2021 IEEE 4th International Conference on Electronics and Communication Engineering (ICECE),18 Jan 2022,2021,,,16,22,"Code clone refers to a pair of semantically similar but syntactically similar or different code fragments that exist in code base. Excessive code clones in software system will cause a negative impact on system development and maintenance. In recent years, as deep learning has become a hot research area of machine learning, researchers have tried to apply deep learning techniques to code clone detection tasks. They have proposed a series of detection techniques using including unstructured (code in the form of sequential tokens) and structured (code in the form of abstract syntax trees and control-flow graphs) information to detect semantically similar but syntactically different code clone, which is the most difficult-to-detect clone type. However, although these methods have achieved an important improvement in the precision of semantic code clone detection, the corresponding false positive rate(FPR) is also at a very high level, making these methods unable to be effectively applied to real-world code bases. This paper proposed SCCD-GAN, an enhanced semantic code clone detection model which based on a graph representation form of programs and uses Graph Attention Network to measure the similarity of code pairs and achieved a lower detection FPR than existing methods. We built the graph representation of the code by expanding the control flow and data flow information to the original abstract syntax tree, and equipped with an attention mechanism to our model that focuses on the most important code parts and features which contribute much to the final detection precision.We implemented and evaluated our proposed method based on the benchmark dataset in the field of code clone detection-BigCloneBench2 and Google Code Jam. SCCD-GAN performed better than the existing state-of-the-art methods in terms of precision and false positive rate.",,978-1-7281-9422-6,10.1109/ICECE54449.2021.9674552,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9674552,Semantic Code Clone Detection;Graph Attention Network;Abstract Syntax Tree;Deep Learning,Deep learning;Codes;Semantics;Cloning;Syntactics;Maintenance engineering;Software systems,graph theory;learning (artificial intelligence);object detection;program diagnostics;software maintenance;trees (mathematics),SCCD-GAN;enhanced semantic code clone detection model;semantically similar but syntactically similar code fragments;different code fragments;code base;excessive code clones;deep learning techniques;code clone detection tasks;detection techniques;control-flow graphs;semantically similar but syntactically different code clone;clone type;real-world code bases;code pairs;lower detection FPR;important code parts;final detection precision;code clone detection-BigCloneBench2;Google Code Jam,,,,20.0,IEEE,18 Jan 2022,,,IEEE,IEEE Conferences
A Review on Distance Measure Formula for Enhancing Match Detection Process of Generic Code Clone Detection Model in Java Application,N. A. Abdullah; M. Azwan Mohamad Hamza; A. -F. M. Ali,"Faculty of Computing,, College of Computing and Applied Science Universiti Malaysia Pahang, Pekan, Pahang; Faculty of Computing, College of Computing and Applied Science Universiti Malaysia Pahang, Pekan, Pahang; Faculty of Computing, College of Computing and Applied Science Universiti Malaysia Pahang, Pekan, Pahang",2021 International Conference on Software Engineering & Computer Systems and 4th International Conference on Computational Science and Information Management (ICSECS-ICOCSIM),17 Sep 2021,2021,,,285,290,"Two code fragments that are identical to each other and repeatedly being implemented in a software program are called code clones. Code clones are classified into four different type which are clone Type-1, clone Type-2, clone Type-3 and clone Type-4. In the past decades, variegated code clone approaches as well as tools have been utilized for detecting code clones. However, the minimum comprehensiveness or lacking of generality in detecting all four types of code clone, has prompted other researchers to develop a code clone detection model. Generic Code Clone Detection (GCCD) Model is the model that implemented a clone detection for the four types of code clone. GCCD incorporates with process namely Pre-processing, Transformation, Parameterization, Categorization and Match Detection process. This research study intends to ameliorate the code clone detection of GCCD Model through Match Detection process of the respective model. A literature review is done to center a few other models and techniques and distance measure formula that available for calculating the code clones in Match Detection process. Based on the analysis, there are ten distance measure formula will be used to decide on the best method for calculating the code clone in Match Detection process. This study hopes to be used as reference for other researchers in aiding their research regarding code clone detection model.",,978-1-6654-1407-4,10.1109/ICSECS52883.2021.00058,Universiti Malaysia Pahang; ,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9537034,code duplication;code clone;code clone detection model;java application;distance measure method,Java;Codes;Scientific computing;Computational modeling;Bibliographies;Cloning;Tools,distance measurement;Java;software maintenance;software metrics,clone Type-3;variegated code clone approaches;Generic Code Clone Detection Model;Match Detection process;Distance Measure Formula;Java Application;software program;GCCD Model,,,,38.0,,17 Sep 2021,,,IEEE,IEEE Conferences
A Review on Distance Measure Formula for Enhancing Match Detection Process of Generic Code Clone Detection Model in Java Application,N. A. Abdullah; M. A. M. Hamza; A. -F. M. Ali,"Faculty of Computing, College of Computing and Applied Science, Universiti Malaysia Pahang, Pekan, Pahang; Faculty of Computing, College of Computing and Applied Science, Universiti Malaysia Pahang, Pekan, Pahang; Faculty of Computing, College of Computing and Applied Science, Universiti Malaysia Pahang, Pekan, Pahang",2021 International Conference on Software Engineering & Computer Systems and 4th International Conference on Computational Science and Information Management (ICSECS-ICOCSIM),17 Sep 2021,2021,,,285,290,"Two code fragments that are identical to each other and repeatedly being implemented in a software program are called code clones. Code clones are classified into four different type which are clone Type-1, clone Type-2, clone Type-3 and clone Type-4. In the past decades, variegated code clone approaches as well as tools have been utilized for detecting code clones. However, the minimum comprehensiveness or lacking of generality in detecting all four types of code clone, has prompted other researchers to develop a code clone detection model. Generic Code Clone Detection (GCCD) Model is the model that implemented a clone detection for the four types of code clone. GCCD incorporates with process namely Pre-processing, Transformation, Parameterization, Categorization and Match Detection process. This research study intends to ameliorate the code clone detection of GCCD Model through Match Detection process of the respective model. A literature review is done to center a few other models and techniques and distance measure formula that available for calculating the code clones in Match Detection process. Based on the analysis, there are ten distance measure formula will be used to decide on the best method for calculating the code clone in Match Detection process. This study hopes to be used as reference for other researchers in aiding their research regarding code clone detection model.",,978-1-6654-1407-4,10.1109/ICSECS52883.2021.00132,Ministry of Higher Education; ,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9536991,code duplication;code clone;code clone detection model;java application;distance measure method,Java;Codes;Scientific computing;Computational modeling;Bibliographies;Cloning;Tools,Java;software maintenance;software metrics,clone Type-3;variegated code clone approaches;generic code clone detection model;match detection process;GCCD;clone Type-1;clone Type-2;clone Type-4,,,,39.0,,17 Sep 2021,,,IEEE,IEEE Conferences
Semantic Code Clone Detection Via Event Embedding Tree and GAT Network,B. Li; C. Ye; S. Guan; H. Zhou,"School of Computer Science and CyberSpace Security, Hainan University, Haikou, China; School of Computer Science and CyberSpace Security, Hainan University, Haikou, China; School of Computer Science and CyberSpace Security, Hainan University, Haikou, China; School of Computer Science and CyberSpace Security, Hainan University, Haikou, China","2020 IEEE 20th International Conference on Software Quality, Reliability and Security (QRS)",11 Dec 2020,2020,,,382,393,"Semantic code clone detection is an important yet challenging task in software engineering. Traditional methods rely on expert experience and cannot automatically determine which features are better for semantic code clone detection. Moreover, the program dynamics (e.g., the execution characteristics and execution order of statements) are not considered in these methods. As a result, this limits their ability to detect semantic clones. To address this issue, we propose a code clone detection method based on event embedding tree and Graph Attention Network. Our method uses a program control flow graph to capture the execution characteristics of each statement and extract the context relationship of different statements in the control flow. Based on such information, our method can calculate the functional similarity of two pieces of code, thereby identifying semantically similar code fragments. Experimental results show that our method is superior to state-of-the-art open source methods for Type-3 (syntactic) / Type-4 (semantic) clone detection.",,978-1-7281-8913-0,10.1109/QRS51102.2020.00057,Research and Development; National Natural Science Foundation of China; Natural Science Foundation of Hainan Province; ,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9282778,code clone detection;event embedding;graph attention network,Semantics;Cloning;Software quality;Syntactics;Software reliability;Task analysis;Software engineering,program diagnostics;software maintenance;trees (mathematics),semantic code clone detection;execution characteristics;semantic clones;code clone detection method;semantically similar code fragments;event embedding tree;GAT network;graph attention network;program control flow graph;software engineering,,,,29.0,,11 Dec 2020,,,IEEE,IEEE Conferences
CloneTM: A Code Clone Detection Tool Based on Latent Dirichlet Allocation,S. Reddivari; M. S. Khan,"School of Computing, University of North Florida, Jacksonville, USA; School of Computing, University of North Florida, Jacksonville, USA",2019 IEEE 43rd Annual Computer Software and Applications Conference (COMPSAC),9 Jul 2019,2019,1,,930,931,"A plethora of clone detection techniques have been proposed in the literature to support a variety of programming languages and adopt different clone detection strategies at different levels of complexity. However, despite these major advances, these techniques are still far from achieving optimal accuracy. This requires developers to manually classify and verify the detected candidate clones, a process that is often described as time-consuming and error-prone. This paper describes CloneTM, a code clone detection tool based on Latent Dirichlet Allocation (LDA). We discuss the key features of CloneTM and present our evaluation on two datasets.",0730-3157,978-1-7281-2607-4,10.1109/COMPSAC.2019.00146,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8754305,Code Clones;Code Refactoring;Latent Dirichlet Allocation;Topic Modeling;Visualization,Cloning;Tools;Software;Measurement;Resource management;Visualization;Java,software maintenance;source code (software),CloneTM;code clone detection tool;clone detection techniques;latent Dirichlet allocation;clone detection strategies;code refactoring,,,,8.0,,9 Jul 2019,,,IEEE,IEEE Conferences
Vulnerable Code Clone Detection for Operating System Through Correlation-Induced Learning,H. Shi; R. Wang; Y. Fu; Y. Jiang; J. Dong; K. Tang; J. Sun,"School of Software, Tsinghua University, Beijing, China; School of Software, Tsinghua University, Beijing, China; School of Software, Tsinghua University, Beijing, China; School of Software, Tsinghua University, Beijing, China; School of Computer Science and Engineering, Central South University, Changsha, China; School of Electronic and Information Engineering, South China University of Technology, Guangzhou, China; School of Software, Tsinghua University, Beijing, China",IEEE Transactions on Industrial Informatics,5 Dec 2019,2019,15,12.0,6551,6559,"Vulnerable code clones in the operating system (OS) threaten the safety of smart industrial environment, and most vulnerable OS code clone detection approaches neglect correlations between functions that limits the detection effectiveness. In this article, we propose a two-phase framework to find vulnerable OS code clones by learning on correlations between functions. On the training phase, functions as the training set are extracted from the latest code repository and function features are derived by their AST structure. Then, external and internal correlations are explored by graph modeling of functions. Finally, the graph convolutional network for code clone detection (GCN-CC) is trained using function features and correlations. On the detection phase, functions in the to-be-detected OS code repository are extracted and the vulnerable OS code clones are detected by the trained GCN-CC. We conduct experiments on five real OS code repositories, and experimental results show that our framework outperforms the state-of-the-art approaches.",1941-0050,,10.1109/TII.2019.2929739,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8765764,Cyber-physical security;correlation modeling;graph convolutional network;vulnerable code clone detection,Cloning;Correlation;Training;Feature extraction;Detectors;Informatics;Operating systems,convolutional neural nets;graph theory;learning (artificial intelligence);operating systems (computers);security of data;software engineering,correlation-induced;vulnerable code clones;operating system;vulnerable OS code clone detection;neglect correlations;detection effectiveness;vulnerable OS code clones;training phase;latest code repository;function features;external correlations;internal correlations;detection phase;OS code repository;vulnerable code clone detection,,2.0,,27.0,IEEE,18 Jul 2019,,,IEEE,IEEE Journals
Fast Code Clone Detection Based on Weighted Recursive Autoencoders,J. Zeng; K. Ben; X. Li; X. Zhang,"College of Electronic Engineering, Naval University of Engineering, Wuhan, China; College of Electronic Engineering, Naval University of Engineering, Wuhan, China; Jinghang Research Institute of Computing and Communication, Beijing, China; College of Electronic Engineering, Naval University of Engineering, Wuhan, China",IEEE Access,12 Sep 2019,2019,7,,125062,125078,"Code cloning considerably facilitates software development but also leads to recurring bugs and other software quality problems. In this paper, we propose a fast code clone detection method based on weighted recursive autoencoders (RAE) to measure code similarity at the function level. Different from manually defining features for code clone detection, our deep learning-based method can automatically learn program features. First, we analyze program abstract syntax trees using weighted RAE, extract the program features and encode the functions to vectors. During the modeling process, we consider node weight information in abstract syntax trees to increase the proportion of information contributed by important nodes in the final vector representation of one program. Second, we report functions with similar vectors as code clone pairs. The second phase is time consuming when analyzing large software systems because it needs quadratic pairwise comparisons. To solve this problem, we transform the clone detection problem into an approximate nearest neighbors search (ANNS) in a high-dimensional vector set and use the navigating spreading-out graph to reduce the computational time complexity. Experimental results on BigCloneBench show that our method outperforms the compared algorithm based on unweighted RAE in terms of precision, recall, and AUC value and can return clone pairs in approximately 33 min, while the compared algorithm requires approximately 14 days when performing pairwise comparisons among 785,438 functions' vectors. Our method also outperforms many prominent tools, including Oreo, in detecting Moderately Type-3 or Type-4 clones, and our false positive rate (FPR) equals 0.055, which means few false positives. More importantly, our method has no need for labeled data, and all of the source code is released to guarantee experimental reproducibility.",2169-3536,,10.1109/ACCESS.2019.2938825,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8822436,Code clone;fast code clone detection;abstract syntax tree;weighted recursive autoencoders;navigating spreading-out graph,Cloning;Feature extraction;Computer bugs;Syntactics;Measurement;Deep learning;Navigation,computational complexity;computational linguistics;feature extraction;nearest neighbour methods;neural nets;program diagnostics;software metrics;software quality;source code (software);trees (mathematics);vectors,BigCloneBench;computational time complexity;navigating spreading-out graph;ANNS;program features extraction;vector representation;high-dimensional vector set;approximate nearest neighbors search;node weight information;weighted RAE;program abstract syntax trees;deep learning-based method;code similarity;fast code clone detection method;software quality problems;recurring bugs;software development;weighted recursive autoencoders;source code;unweighted RAE,,11.0,,35.0,CCBY,2 Sep 2019,,,IEEE,IEEE Journals
Structural Function Based Code Clone Detection Using a New Hybrid Technique,Y. Yang; Z. Ren; X. Chen; H. Jiang,"School of Software, Dalian University of Technology, Dalian, China; School of Software, Dalian University of Technology, Dalian, China; School of Software, Dalian University of Technology, Dalian, China; School of Software, Dalian University of Technology, Dalian, China",2018 IEEE 42nd Annual Computer Software and Applications Conference (COMPSAC),22 Jun 2018,2018,01,,286,291,"In this paper, we focus on investigating function based code clone detection and leveraging the structural information to measure the similarity of code fragments in the function level. The method first combines a variant of Abstract Syntax Tree(AST) to achieve more abstract code representations by using defined node types instead of the original node representations, and then adopts a local comparison algorithm, namely Smith Waterman, to calculate the similarity scores of pairs of code fragments in the function level. Experiments conducted over the five open-source datasets show that our method can achieve 92.46% in precision on average, and outperform the comparative algorithms by up to 10.94% and 4.02%, respectively. Meanwhile, experimental results show that our method can achieve 90.73% in precision on average in code clone detection over cross-projects.",0730-3157,978-1-5386-2667-2,10.1109/COMPSAC.2018.00045,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8377669,"code clone, structural clone, Abstract Syntax Tree, Smith Waterman, function based code clone detection",Cloning;Software;Measurement;Manuals;Syntactics;Estimation;Transforms,encoding;software maintenance;trees (mathematics),structural function;function based code clone detection;structural information;code fragments;abstract code representations;local comparison algorithm;abstract syntax tree;AST,,7.0,,17.0,,22 Jun 2018,,,IEEE,IEEE Conferences
To enhance the code clone detection algorithm by using hybrid approach for detection of code clones,Roopam; G. Singh,"Lovely Professional University, Phagwara, Punjab, IN; Lovely Professional University, Phagwara, Punjab, IN",2017 International Conference on Intelligent Computing and Control Systems (ICICCS),11 Jan 2018,2017,,,192,198,"Code clones are easy and quick way to add some existing logic from one section to another section. Code clones however increase risk of bug multiplication with each copy of duplicate code if there is a bug in source of clone. Clone is a persistent form of software reuses that effect on maintenance of large software. In previous research, the researchers emphasize on detecting type 1, type 2, type 3 and type 4 type of clones. The existing code clone detection techniques are available like text based, token based, abstract syntax tree, program dependency graph and metric based technique are used to detect clone in source code. In this research, the enhancement in code clone detection algorithm has been proposed which detects code clones by HYBRID approach that is combination of program dependency graph and Metric based clone detection techniques. In this work, firstly implementation of code clone detection will be done by hybrid approach on various datasets. Then, comparison of existing technique will be done with the hybrid technique in terms of achieving enhancement in performance, efficiency and accuracy in results. This method is considered to be the least complex and is to provide a most accurate and efficient way of Clone Detection. The results obtained have been compared with an existing tool for the open source of web applications.",,978-1-5386-2745-7,10.1109/ICCONS.2017.8250708,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8250708,Code clone;parsing;plagiarism;refactoring;reuse;semantic;syntactic;similarity,Cloning;Measurement;Software;Computer bugs;Syntactics;Algorithm design and analysis;Control systems,program debugging;software maintenance;software metrics;software reusability,HYBRID approach;source code;duplicate code;hybrid approach;code clone detection algorithm,,2.0,,19.0,,11 Jan 2018,,,IEEE,IEEE Conferences
TECCD: A Tree Embedding Approach for Code Clone Detection,Y. Gao; Z. Wang; S. Liu; L. Yang; W. Sang; Y. Cai,Tianjin University; Tianjin University; Tianjin University; Tianjin University; Tianjin University; Drexel University,2019 IEEE International Conference on Software Maintenance and Evolution (ICSME),5 Dec 2019,2019,,,145,156,"Clone detection techniques have been explored for decades. Recently, deep learning techniques has been adopted to improve the code representation capability, and improve the state-of-the-art in code clone detection. These approaches usually require a transformation from AST to binary tree to incorporate syntactical information, which introduces overheads. Moreover, these approaches conduct term-embedding, which requires large training datasets. In this paper, we introduce a tree embedding technique to conduct clone detection. Our approach first conducts tree embedding to obtain a node vector for each intermediate node in the AST, which captures the structure information of ASTs. Then we compose a tree vector from its involving node vectors using a lightweight method. Lastly Euclidean distances between tree vectors are measured to determine code clones. We implement our approach in a tool called TECCD and conduct an evaluation using the BigCloneBench (BCB) and 7 other large scale Java projects. The results show that our approach achieves good accuracy and recall and outperforms existing approaches.",2576-3148,978-1-7281-3094-1,10.1109/ICSME.2019.00025,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8918964,code clone detection;AST;Skip-gram,Cloning;Machine learning;Training;Tools;Task analysis;Natural language processing,Boolean algebra;Java;learning (artificial intelligence);software maintenance;trees (mathematics),TECCD;tree embedding approach;code clone detection;clone detection techniques;deep learning techniques;code representation capability;AST;binary tree;term-embedding;tree embedding technique;node vector;tree vector;involving node vectors;code clones,,5.0,,72.0,,5 Dec 2019,,,IEEE,IEEE Conferences
A Systematic Review on Code Clone Detection,Q. U. Ain; W. H. Butt; M. W. Anwar; F. Azam; B. Maqbool,"Department of Computer and Software Engineering, National University of Sciences and Technology (NUST), Islamabad, Pakistan; Department of Computer and Software Engineering, National University of Sciences and Technology (NUST), Islamabad, Pakistan; Department of Computer and Software Engineering, National University of Sciences and Technology (NUST), Islamabad, Pakistan; Department of Computer and Software Engineering, National University of Sciences and Technology (NUST), Islamabad, Pakistan; Department of Computer and Software Engineering, National University of Sciences and Technology (NUST), Islamabad, Pakistan",IEEE Access,11 Jul 2019,2019,7,,86121,86144,"Code cloning refers to the duplication of source code. It is the most common way of reusing source code in software development. If a bug is identified in one segment of code, all the similar segments need to be checked for the same bug. Consequently, this cloning process may lead to bug propagation that significantly affects the maintenance cost. By considering this problem, code clone detection (CCD) appears as an active area of research. Consequently, there is a strong need to investigate the latest techniques, trends, and tools in the domain of CCD. Therefore, in this paper, we comprehensively inspect the latest tools and techniques utilized for the detection of code clones. Particularly, a systematic literature review (SLR) is performed to select and investigate 54 studies pertaining to CCD. Consequently, six categories are defined to incorporate the selected studies as per relevance, i.e., textual approaches (12), lexical approaches (8), tree-based approaches (3), metric-based approaches (7), semantic approaches (7), and hybrid approaches (17). We identified and analyzed 26 CCD tools, i.e., 13 existing and 13 proposed/developed. Moreover, 62 open-source subject systems whose source code is utilized for the CCD are presented. It is concluded that there exist several studies to detect type1, type2, type3, and type4 clones individually. However, there is a need to develop novel approaches with complete tool support in order to detect all four types of clones collectively. Furthermore, it is also required to introduce more approaches to simplify the development of a program dependency graph (PDG) while dealing with the detection of the type4 clones.",2169-3536,,10.1109/ACCESS.2019.2918202,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8719895,CCD;SLR;code clone detection;CCD tools;code clone types,Cloning;Charge coupled devices;Tools;Semantics;Software;Computer bugs;Databases,program debugging;public domain software;software metrics;software reusability;source code (software);trees (mathematics),code clone detection;systematic literature review;PDG;program dependency graph;metric-based approaches;lexical approaches;SLR;software development;source code reusing;CCD tools;open-source subject systems;bug propagation;semantic approaches;tree-based approaches,,27.0,,77.0,OAPA,22 May 2019,,,IEEE,IEEE Journals
Interface Driven Code Clone Detection,M. R. H. Misu; K. Sakib,"Institute of Information Technology, University of Dhaka, Dhaka, Bangladesh; Institute of Information Technology, University of Dhaka, Dhaka, Bangladesh",2017 24th Asia-Pacific Software Engineering Conference (APSEC),5 Mar 2018,2017,,,747,748,"Code cloning is a common code reusing technique that occurs when developers replicate similar pieces of code fragments within or between software repositories. Another replication happens when developers repeat method interfaces (i.e., method name, return and parameter types). Two methods are prone to be cloned when those have similar interfaces and perform similar functionalities. Considering this, a new lightweight Interface Driven Code Clone Detection (IDCCD) technique is proposed, that can detect clones by using method interface similarities. First, the method blocks are tokenized from the source files. For those method block tokens, interface information is extracted and indexed with mapped tokens. Then, similar interfaces are queried from that index and compared those with a similarity function for detecting clones. IDCCD is evaluated with other state of the art techniques by using BigCloneEval framework. The experimental results show that IDCCD performs similar comparing to other existing tools with a lower complexity.",,978-1-5386-3681-7,10.1109/APSEC.2017.97,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8306014,Code Clone;Clone Detection;Interface,Cloning;Indexes;Tools;Software engineering;Software;Data mining;Standards,software maintenance;software reusability,IDCCD;method interface similarities;method block tokens;interface driven code clone detection technique;code reusing technique;software repositories;BigCloneEval framework,,4.0,,5.0,,5 Mar 2018,,,IEEE,IEEE Conferences
Research on Code Plagiarism Detection Based on Code Clone Detection Technologies,L. Muxin,"Ocean University of China, Qingdao, China",2021 2nd International Conference on Big Data and Informatization Education (ICBDIE),21 Jun 2021,2021,,,274,277,"At present, assignment plagiarism is common in higher education at home and abroad especially in the coursework of computer majors. How to detect code plagiarism in programming course assignments effectively is a significant problem. The classic methods of code plagiarism detection mainly use the attribute or structure information to measure the similarity of source codes. In this dissertation, the definition and general process of clone plagiarism detection, different code clone detection technologies and the related tools are introduced.",,978-1-6654-3870-4,10.1109/ICBDIE52740.2021.00068,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9457455,Code Plagiarism;Clone Detection;Clone Type,Plagiarism;Roads;Education;Cloning;Tools;Big Data;Software systems,computer aided instruction;computer science education;educational courses;further education;programming;security of data;source code (software),course assignments;code plagiarism detection;source codes;clone plagiarism detection;assignment plagiarism;code clone detection technologies;higher education;programming course,,,,28.0,IEEE,21 Jun 2021,,,IEEE,IEEE Conferences
Learning-Based Recursive Aggregation of Abstract Syntax Trees for Code Clone Detection,L. Büch; A. Andrzejak,"Institute of Computer Science, Heidelberg University, Germany; Institute of Computer Science, Heidelberg University, Germany","2019 IEEE 26th International Conference on Software Analysis, Evolution and Reengineering (SANER)",18 Mar 2019,2019,,,95,104,"Code clone detection remains a crucial challenge in maintaining software projects. Many classic approaches rely on handcrafted aggregation schemes, while recent work uses supervised or unsupervised learning. In this work, we study several aspects of aggregation schemes for code clone detection based on supervised learning. To this aim, we implement an AST-based Recursive Neural Network. Firstly, our ablation study shows the influence of model choices and hyperparameters. We introduce error scaling as a way to effectively and efficiently address the class imbalance problem arising in code clone detection. Secondly, we study the influence of pretrained embeddings representing nodes in ASTs. We show that simply averaging all node vectors of a given AST yields strong baseline aggregation scheme. Further, learned AST aggregation schemes greatly benefit from pretrained node embeddings. Finally, we show the importance of carefully separating training and test data by clone clusters, to reliably measure generalization of models learned with supervision.",1534-5351,978-1-7281-0591-8,10.1109/SANER.2019.8668039,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8668039,Code Clone Detection;Abstract Syntax Trees;Embeddings;Recursive Neural Network;Siamese Network,Cloning;Training;Recurrent neural networks;Biological neural networks;Logic gates;Syntactics,neural nets;software maintenance;supervised learning,code clone detection;handcrafted aggregation schemes;supervised learning;learned AST;AST-based recursive neural network;learning-based recursive aggregation;abstract syntax trees;software projects;error scaling;class imbalance problem,,28.0,,40.0,,18 Mar 2019,,,IEEE,IEEE Conferences
Component-based experimental testbed to faciltiate code clone detection research,C. Wijesiriwardana; P. Wimalaratne,"University of Colombo School of Computing, Sri Lanka; University of Colombo School of Computing, Sri Lanka",2017 8th IEEE International Conference on Software Engineering and Service Science (ICSESS),23 Apr 2018,2017,,,165,168,"Over the past few decades clone detection has become a major area of study among software researchers and software practitioners. Clone detection experiments present a number of challenges such as accurate data collection, data cleaning and selection of proper code detection algorithms. This urges the need for a systematic and unambiguous approach to conduct clone detection experiments. As a solution, this paper presents an experimental testbed, which consists of a collection of “clone detection components (CDCs)”. CDCs are concrete representations of tasks associated with clone detection experiments such as data extraction, pre-processing and detection of clones. These CDCs could be used in isolation to represent a simple task or could be composed to represent a complex task. The usefulness of the experimental testbed is evaluated with an important clone detection experiment for three open source projects.",2327-0594,978-1-5386-0497-7,10.1109/ICSESS.2017.8342888,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8342888,code clone detection;clone detection component;component composition,Cloning;Software;Task analysis;Tools;Measurement;Systematics;Data mining,object-oriented programming;program testing,code clone detection research;software researchers;data collection;Component-based experimental testbed,,1.0,,33.0,,23 Apr 2018,,,IEEE,IEEE Conferences
CCEyes: An Effective Tool for Code Clone Detection on Large-Scale Open Source Repositories,Y. Zhang; T. Wang,"College of Computer, National University of Defense Technology, Changsha, China; College of Computer, National University of Defense Technology, Changsha, China",2021 IEEE International Conference on Information Communication and Software Engineering (ICICSE),23 Apr 2021,2021,,,61,70,"Code clone is a common phenomenon in the rapid development of the software ecosystem and open source community, which can improve efficiency, while leading to many negative effects on software maintenance at the same time. In this paper, we propose CCEyes, an effective tool for code clone detection on GitHub. We build a semantic vector representations corpora database of large-scale open sourse codes by the deep learning-based method that can automatically learn program features to address the resource challenge. CCEyes returns the detection results according to the user's input, including similar clone code fragments, similarity analysis and repository address on GitHub. Among which the Recursive Autoencoder is designed to learn code representation and then the comparator network is employed for similarity evaluation. We conduct comprehensive experiments on the ability of the detection method, the effectiveness of database storage. Besides, we also compare CCEyes with other application tools and conduct a user study. The evalution results in that CCEyes outperforms state-of-the-art.",,978-1-6654-1919-2,10.1109/ICICSE52190.2021.9404141,National Nature Science Foundation of China(grant numbers:61702532); National key R&D Program of China(grant numbers:2018YFB1003903); ,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9404141,code clone detection;code search;open source;large-scale;vector representation;learning,Learning systems;Software maintenance;Databases;Conferences;Semantics;Ecosystems;Cloning,database management systems;deep learning (artificial intelligence);public domain software;recursive functions;software maintenance,code representation;detection method;CCEyes;application tools;code clone detection;large-scale open source repositories;software ecosystem;open source community;software maintenance;GitHub;semantic vector representations corpora database;large-scale open sourse codes;deep learning;similar clone code;similarity analysis;repository address;recursive autoencoder,,,,32.0,IEEE,23 Apr 2021,,,IEEE,IEEE Conferences
A picture is worth a thousand words: Code clone detection based on image similarity,C. Ragkhitwetsagul; J. Krinke; B. Marnette,"University College London, London, London, GB; University College London, London, London, GB; Prodo.ai London, UK",2018 IEEE 12th International Workshop on Software Clones (IWSC),29 Mar 2018,2018,,,44,50,"This paper introduces a new code clone detection technique based on image similarity. The technique captures visual perception of code seen by humans in an IDE by applying syntax highlighting and images conversion on raw source code text. We compared two similarity measures, Jaccard and earth mover's distance (EMD) for our image-based code clone detection technique. Jaccard similarity offered better detection performance than EMD. The F1 score of our technique on detecting Java clones with pervasive code modifications is comparable to five well-known code clone detectors: CCFinderX, Deckard, iClones, NiCad, and Simian. A Gaussian blur filter is chosen as a normalisation technique for type-2 and type-3 clones. We found that blurring code images before similarity computation resulted in higher precision and recall. The detection performance after including the blur filter increased by 1 to 6 percent. The manual investigation of clone pairs in three software systems revealed that our technique, while it missed some of the true clones, could also detect additional true clone pairs missed by NiCad.",2572-6587,978-1-5386-6430-8,10.1109/IWSC.2018.8327318,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8327318,,Cloning;Java;Earth;Detectors;Image color analysis;Visualization,image processing;Java;public domain software;software maintenance;source code (software),code clone detection technique;Jaccard similarity;pervasive code modifications;code clone detectors;normalisation technique;type-3 clones;similarity computation;clone pairs;image similarity;syntax highlighting;raw source code text;similarity measures;image conversion;Java clone detection;code image blurring;software systems,,13.0,,,,29 Mar 2018,,,IEEE,IEEE Conferences
C4: Contrastive Cross-Language Code Clone Detection,C. Tao; Q. Zhan; X. Hu; X. Xia,"Zhejiang University, Hangzhou, China; Zhejiang University, Hangzhou, China; School of Software Technology, Zhejiang University, Ningbo, China; Software Engineering Application Technology Lab, Huawei, China",2022 IEEE/ACM 30th International Conference on Program Comprehension (ICPC),22 Jun 2022,2022,,,413,424,"During software development, developers introduce code clones by reusing existing code to improve programming productivity. Considering the detrimental effects on software maintenance and evolution, many techniques are proposed to detect code clones. Existing approaches are mainly used to detect clones written in the same programming language. However, it is common to develop programs with the same functionality but in different programming languages to support various platforms. In this paper, we propose a new approach named C4, referring to Contrastive Cross-language Code Clone detection model. It can detect cross-language clones with learned representations effectively. C4 exploits the pre-trained model CodeBERT to convert programs in different languages into high-dimensional vector representations. In addition, we fine tune the C4 model through a constrastive learning objective that can effectively recognize clone pairs and non-clone pairs. To evaluate the effectiveness of our approach, we conduct extensive experiments on the dataset proposed by CLCDSA. Experimental results show that C4 achieves scores of 0.94, 0.90, and 0.92 in terms of precision, recall and F-measure and substantially outperforms the state-of-the-art baselines.",2643-7171,978-1-4503-9298-3,10.1145/3524610.3527911,"National Science Foundation of China(grant numbers:62141222,U20A20173); ",https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9796359,Code Clone Detection;Neural Networks;Cross-Language;Contrastive Learning,Productivity;Computer languages;Software maintenance;Codes;Cloning;Programming,learning (artificial intelligence);program diagnostics;program verification;software maintenance;tree data structures,software maintenance;code clones;programming language;Contrastive Cross-language Code Clone detection model;cross-language clones;pre-trained model CodeBERT;clone pairs;nonclone pairs;C4 achieves scores;software development;reusing existing code;programming productivity,,,,45.0,,22 Jun 2022,,,IEEE,IEEE Conferences
Learn To Align: A Code Alignment Network For Code Clone Detection,A. Zhang; K. Liu; L. Fang; Q. Liu; X. Yun; S. Ji,"Nanjing University of Aeronautics and Astronautics, Nanjing, Jiangsu, P.R. China; Nanjing University of Aeronautics and Astronautics, Nanjing, Jiangsu, P.R. China; Nanjing University of Aeronautics and Astronautics, Nanjing, Jiangsu, P.R. China; Zhejiang University, Hangzhou, Zhejiang, P.R. China; Nanjing University of Aeronautics and Astronautics, Nanjing, Jiangsu, P.R. China; Zhejiang University, Hangzhou, Zhejiang, P.R. China",2021 28th Asia-Pacific Software Engineering Conference (APSEC),17 Feb 2022,2021,,,1,11,"Deep learning techniques have achieved promising results in code clone detection in the past decade. However, existing techniques merely focus on how to extract more dis-criminative features from source codes, while some issues, such as structural differences of functional similar codes, are not explicitly addressed. This phenomenon is common when programmers copy a code segment along with adding or removing several statements, or use a more flexible syntax structure to implement the same function. In this paper, we unify the aforementioned problems as the problem of code misalignment, and propose a novel code alignment network to tackle it. We design a bi-directional causal convolutional neural network to extract feature representations of code fragments with rich structural and semantical information. After feature extraction, our method learns to align the two code fragments in a data-driven fashion. We present two independent strategies for code alignment, namely attention-based alignment and sparse reconstruction-based alignment. Both two strategies strive to learn an alignment matrix that represents the correspondences between two code fragments. Our method outperforms state-of-the-art methods in terms of F1 score by 0.5% and 3.1 % on BigCloneBench and OJClone, respectively11Our code is available at https://github.com/ArcticHare105/Code-Alignment.",2640-0715,978-1-6654-3784-4,10.1109/APSEC53868.2021.00008,"National Natural Science Foundation of China(grant numbers:62172214,62076125,U20B2049,U20B2050); NUAA; Ministry of Industry and Information Technology(grant numbers:XCA20026); ",https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9712141,Code clone detection;Bi-directional causal convolutional neural network;Code alignment,Deep learning;Codes;Cloning;Bidirectional control;Syntactics;Feature extraction;Convolutional neural networks,deep learning (artificial intelligence);feature extraction;neural nets;software maintenance,code misalignment;code alignment network;code fragments;rich structural information;semantical information;feature extraction;attention-based alignment;reconstruction-based alignment;alignment matrix;code clone detection;deep learning techniques;discriminative features;source codes;functional similar codes;code segment;flexible syntax structure;bidirectional causal convolutional neural network;BigCloneBench;OJClone,,,,28.0,IEEE,17 Feb 2022,,,IEEE,IEEE Conferences
AST-path Based Compare-Aggregate Network for Code Clone Detection,H. Liang; L. Ai,"Scool of Computer Science, Beijing University of Posts and Telecommunications, Beijing, China; Scool of Computer Science, Beijing University of Posts and Telecommunications, Beijing, China",2021 International Joint Conference on Neural Networks (IJCNN),20 Sep 2021,2021,,,1,8,"Code clone detection remains one of the main challenges in maintaining software projects. Recently, state-of-the-art researches have shown that neural models based on abstract syntax trees (ASTs) can better represent code fragment. However, existing tree-based models are prone to gradient vanishing problems due to the large size of ASTs. In this paper, we represent a code fragment as the set of compositional paths in its abstract syntax tree (AST) and use this code representation to train a classifier to detect clone pairs. Unlike the siamese based model that obtains the embeddings of code fragments separately and then computes the similarity in vector space, our compare-aggregate based network takes two code fragments as a whole to obtain the vectors for classification. To validate our model's ability to detect code clones, we evaluated it on the publicly available dataset BigCloneBench, and the experimental results show our model outperforms the state-of-the-art model ASTNN.",2161-4407,978-1-6654-3900-8,10.1109/IJCNN52387.2021.9534099,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9534099,compare-aggregate model;siamese based model;AST;Code Clone Detection,Training;Codes;Computational modeling;Neural networks;Cloning;Syntactics;Software,neural nets;software maintenance;trees (mathematics),code clone detection;neural models;abstract syntax tree;code fragment;tree-based models;code representation;siamese based model;compare-aggregate based network;code clones;ASTNN;AST-path based compare-aggregate network;clone pairs detection,,,,29.0,,20 Sep 2021,,,IEEE,IEEE Conferences
A code clone detection algorithm based on graph convolution network with AST tree edge,Z. Lu; R. Li; H. Hu; W. -a. Zhou,"School of Computer Science, Beijing University of Posts and Telecommunications, Beijing, China; School of Computer Science, Beijing University of Posts and Telecommunications, Beijing, China; Science and Technology on Communication Information Security Control Laboratory, Jiaxing, China; School of Computer Science, Beijing University of Posts and Telecommunications, Beijing, China","2021 IEEE 21st International Conference on Software Quality, Reliability and Security Companion (QRS-C)",1 Apr 2022,2021,,,1027,1032,"Detecting code cloning will prevent it from bringing risks such as vulnerabilities and intellectual property disputes in complex software systems such as large-scale defense software systems and commercial software systems. In the field of deep code clone detection, neural networks such as Tree-CNN and Tree-LSTM, which extract features from AST (abstract syntax tree), can't collect global information of upper and lower nodes, and information can't flow globally, but graph neural network can avoid this problem. This paper presents a method of edging AST, and uses GCN (Graph Convolutional Network) and GAT(Graph Attention Networks) to extract code feature vector. Finally, the experiment is carried out on BigCloneBench data set, using several common binary classification indexes, and analyzing the time consumption, it is concluded that the effect and time efficiency of using graph neural network for code clone detection are significantly improved, especially for the code fragments with completely different semantics.",2693-9371,978-1-6654-7836-6,10.1109/QRS-C55045.2021.00156,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9741968,code clone;edging AST;graph neural networks;GCN;GAT,Codes;Semantics;Cloning;Software quality;Syntactics;Feature extraction;Software systems,edge detection;feature extraction;graph theory;industrial property;neural nets;software maintenance;trees (mathematics),neural networks;Tree-CNN;Tree-LSTM;abstract syntax tree;global information;upper nodes;lower nodes;graph neural network;edging AST;Graph Convolutional Network;code feature vector;code clone detection algorithm;graph convolution network;AST tree edge;code cloning;intellectual property disputes;complex software systems;large-scale defense software systems;commercial software systems;deep code clone detection,,,,11.0,IEEE,1 Apr 2022,,,IEEE,IEEE Conferences
On Precision of Code Clone Detection Tools,F. Farmahinifarahani; V. Saini; D. Yang; H. Sajnani; C. V. Lopes,"University of California, Irvine, USA; University of California, Irvine, USA; University of California, Irvine, USA; Microsoft, Inc, USA; University of California, Irvine, USA","2019 IEEE 26th International Conference on Software Analysis, Evolution and Reengineering (SANER)",18 Mar 2019,2019,,,84,94,"Precision and recall are the main metrics used to measure the correctness of clone detectors. These metrics require the existence of labeled datasets containing the ground truth - samples of clone and non-clone pairs. For source code clone detectors, in particular, there are some techniques, as well as a concrete framework, for automatically evaluating recall, down to different types of clones. However, evaluating precision is still challenging, because of the intensive and specialized manual effort required to accomplish the task. Moreover, when precision is reported, it is typically done over all types of clones, making it hard to assess the strengths and weaknesses of the corresponding clone detectors. This paper presents systematic experiments to evaluate precision of eight code clone detection tools. Three judges independently reviewed 12,800 clone pairs to compute the undifferentiated and type-based precision of these tools. Besides providing a useful baseline for future research in code clone detection, another contribution of our work is to unveil important considerations to take into account when doing precision measurements and reporting the results. Specifically, our work shows that the reported precision of these tools leads to significantly different conclusions and insights about the tools when different types of clones are taken into account. It also stresses, once again, the importance of reporting inter-rater agreement.",1534-5351,978-1-7281-0591-8,10.1109/SANER.2019.8668015,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8668015,Software Clones;Clone Detection Tools;Precision Evaluation;Type-based Clone Study,Cloning;Tools;Detectors;Syntactics;Manuals;Indexes;Measurement,program debugging;software metrics;software tools;source code (software),source code clone detectors;code clone detection tools;clone pairs,,3.0,,39.0,,18 Mar 2019,,,IEEE,IEEE Conferences
Comparison and Visualization of Code Clone Detection Results,K. Matsushima; K. Inoue,"Graduate School of Information Science and Technology, Osaka University, Osaka, Japan; Graduate School of Information Science and Technology, Osaka University, Osaka, Japan",2020 IEEE 14th International Workshop on Software Clones (IWSC),26 Mar 2020,2020,,,45,51,"Many techniques for code clone detection have been proposed and implemented as clone detectors in the past. These studies show that a result of code clone detection changes drastically for different tools and/or their detection parameters. Therefore, it is important to apply different clone detectors or different parameters and to identify the different or common parts of the obtained detection results. In this paper, we propose a method for comparison and visualization of detection results based on the correspondence of clone pairs. It enables developers to compare detection results by different tools and/or their detection parameters. Using this method, we will show the comparison results of an OSS using two code clone detectors, CCFinderX and NiCad.",2572-6587,978-1-7281-6269-0,10.1109/IWSC50091.2020.9047633,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9047633,Code Clone;Visualization;Software Maintenance,Cloning;Detectors;Visualization;Computer bugs;Tools;Software;Information science,program diagnostics;public domain software;software maintenance;source code (software),code clone detection results;detection parameters;clone detectors;common parts;visualization;clone pairs;code clone detectors,,,,23.0,,26 Mar 2020,,,IEEE,IEEE Conferences
Twin-Finder: Integrated Reasoning Engine for Pointer-Related Code Clone Detection,H. Xue; Y. Mei; K. Gogineni; G. Venkataramani; T. Lan,"The George Washington University, Washington, DC, USA; The George Washington University, Washington, DC, USA; The George Washington University, Washington, DC, USA; The George Washington University, Washington, DC, USA; The George Washington University, Washington, DC, USA",2020 IEEE 14th International Workshop on Software Clones (IWSC),26 Mar 2020,2020,,,1,7,"Detecting code clones is crucial in various software engineering tasks. In particular, code clone detection can have significant uses in the context of analyzing and fixing bugs in large scale applications. However, prior works, such as machine learning-based clone detection, may cause a considerable amount of false positives. In this paper, we propose Twin-Finder, a novel, closed-loop approach for pointer-related code clone detection that integrates machine learning and symbolic execution techniques to achieve precision. Twin-Finder introduces a clone verification mechanism to formally verify if two clone samples are indeed clones and a feedback loop to automatically generated formal rules to tune machine learning algorithm and further reduce the false positives. Our experimental results show that Twin-Finder can swiftly identify up 9× more code clones comparing to a tree-based clone detector, Deckard and remove an average 91.69% false nositives.",2572-6587,978-1-7281-6269-0,10.1109/IWSC50091.2020.9047638,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9047638,Memory Safety;Formal methods;Code Clones,Cloning;Safety;Syntactics;Compounds;Computer bugs;Machine learning;Feedback loop,formal verification;learning (artificial intelligence);program diagnostics;reasoning about programs;software maintenance,clone verification mechanism;clone samples;machine learning algorithm;false positives;Twin-Finder;tree-based clone detector;integrated reasoning engine;pointer-related code clone detection;software engineering tasks;machine learning-based clone detection;bugs fixing,,,,20.0,,26 Mar 2020,,,IEEE,IEEE Conferences
An Effective Semantic Code Clone Detection Framework Using Pairwise Feature Fusion,A. Sheneamer; S. Roy; J. Kalita,"Faculty of Computer Science and Information Technology, Jazan University, Jazan, Saudi Arabia; Department of Computer Applications, Sikkim University, Gangtok, India; College of Engineering and Applied Science, University of Colorado at Colorado Springs, Colorado Springs, CO, USA",IEEE Access,17 Jun 2021,2021,9,,84828,84844,"Code clones. In this work, we propose a novel detection framework using machine learning for automated detection of all four type of clones. The features extracted from a pair of code blocks are combined for possible detection of a clone with respect to a reference block. We use AST and PDG features of both code blocks to prepare labelled training samples after fusing the two feature vectors using three different alternatives. We use six state-of-the-art classification models including Deep Convolutional Neural Network to assess the prediction performance of our scheme. To access the effectiveness of our framework we use seven datasets and compare its performance with five state-of-the-art clone detectors. We also compare a large number of algorithms for code clone detection. Comparing the performance of a large number of machine learning techniques, ANN and non-ANN, using such features, and establishing that fusing of AST and PDG features gives competitive results using deep learning as well as boosted tree algorithms, we find that boosted tree algorithms like XGBoost are quite competitive in clone detection. Experimental results demonstrate that our approach outperforms existing clone detection methods in terms of prediction accuracy.",2169-3536,,10.1109/ACCESS.2021.3079156,"Jazan University, Saudi Arabia; ",https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9427518,Machine learning;code clones;semantic clones;AST;PDG;features;deep learning;classification,Cloning;Semantics;Feature extraction;Task analysis;Syntactics;Machine learning algorithms;Prediction algorithms,feature extraction;learning (artificial intelligence);neural nets;pattern classification;trees (mathematics),state-of-the-art clone detectors;machine learning techniques;AST;PDG features;deep learning;boosted tree algorithms;clone detection methods;effective semantic code clone detection framework;pairwise feature fusion;code clones;novel detection framework;automated detection;code blocks;possible detection;reference block;labelled training samples;feature vectors;state-of-the-art classification models;Deep Convolutional Neural Network;prediction performance,,,,71.0,CCBYNCND,11 May 2021,,,IEEE,IEEE Journals
VGRAPH: A Robust Vulnerable Code Clone Detection System Using Code Property Triplets,B. Bowman; H. H. Huang,"Graph Computing Lab, George Washington University; Graph Computing Lab, George Washington University",2020 IEEE European Symposium on Security and Privacy (EuroS&P),2 Nov 2020,2020,,,53,69,"Software vulnerabilities are a common attack vector for cyber adversaries. This problem has been exacerbated by the wealth of open-source software projects, as code is often copy-pasted to new locations. This causes a serious problem when a new security vulnerability is discovered in a particular software project, as it may potentially affect many others. Discovering vulnerable code reuse in source code is known as vulnerable code clone detection. This is a very challenging problem as the cloned code has the potential to be modified, sometimes significantly, from the original code, while still retaining the underlying vulnerability. Existing vulnerable clone detection techniques are either too strict, missing vulnerabilities when they have subtle modifications, or are too narrow, applicable only to a small number of vulnerability types. In this work we present VGRAPH, a technique for identifying vulnerable code clones, which is more robust to code modification, while still remaining generic to all vulnerability types. VGRAPHs are representations of vulnerable source code comprising three graph-based components representing code property relationships extracted from the contextual code, the vulnerable code, and the patched code. We develop a matching algorithm utilizing these three graph-based components which is able to identify vulnerable code clones with a precision of 98% and recall of 97%. Even for highly modified code clones, we are able to identify over 100 more vulnerable clones than the best performing comparison work ReDeBug. When we apply our technique to several versions of popular software packages (e.g., FFMpeg, OpenSSL), we are able to identify 10 vulnerabilities which were silently patched and are not listed in the National Vulnerability Database.",,978-1-7281-5087-1,10.1109/EuroSP48549.2020.00012,"DARPA(grant numbers:N66001-18-C-4033); National Science Foundation(grant numbers:1350766,1618706,1717774); ",https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9230372,vulnerability;code clone;source code;static analysis;software security,Codes;Databases;Software packages;Cloning;Approximation algorithms;Distance measurement;Security,graph theory;program diagnostics;public domain software;security of data;software maintenance,VGRAPH;robust vulnerable code clone detection system;software vulnerabilities;open-source software projects;security vulnerability;vulnerable code reuse;vulnerable clone detection techniques;vulnerability types;code modification;vulnerable source code comprising;code property relationships;contextual code;patched code;highly modified code clones;National Vulnerability Database,,6.0,,29.0,,2 Nov 2020,,,IEEE,IEEE Conferences
FCCA: Hybrid Code Representation for Functional Clone Detection Using Attention Networks,W. Hua; Y. Sui; Y. Wan; G. Liu; G. Xu,"College of Information Engineering, Shanghai Maritime University, Shanghai, China; University of Technology, Sydney, NSW, Australia; Zhejiang University, Hangzhou, China; College of Information Engineering, Shanghai Maritime University, Shanghai, China; University of Technology, Sydney, NSW, Australia",IEEE Transactions on Reliability,2 Mar 2021,2021,70,1.0,304,318,"Code cloning, which reuses a fragment of source code via copy-and-paste with or without modifications, is a common way for code reuse and software prototyping. However, the duplicated code fragments often affect software quality, resulting in high maintenance cost. The existing clone detectors using shallow textual or syntactical features to identify code similarity are still ineffective in accurately finding sophisticated functional code clones in real-world code bases. This article proposes functional code clone detector using attention (FCCA), a deep-learning-based code clone detection approach on top of a hybrid code representation by preserving multiple code features, including unstructured (code in the form of sequential tokens) and structured (code in the form of abstract syntax trees and control-flow graphs) information. Multiple code features are fused into a hybrid representation, which is equipped with an attention mechanism that pays attention to important code parts and features that contribute to the final detection accuracy. We have implemented and evaluated FCCA using 275 777 real-world code clone pairs written in Java. The experimental results show that FCCA outperforms several state-of-the-art approaches for detecting functional code clones in terms of accuracy, recall, and F1 score.",1558-1721,,10.1109/TR.2020.3001918,"National Natural Science Foundation of China(grant numbers:61672338,61373028); Australian Research Council(grant numbers:DP200101374,LP170100891,DP200101328); ",https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9146274,Attention mechanism;code clone detection;code representation;deep neural network (DNN),Cloning;Feature extraction;Detectors;Syntactics;Software quality;Maintenance engineering,Java;learning (artificial intelligence);software maintenance;software quality,real-world code clone pairs;important code parts;hybrid representation;control-flow graphs;multiple code features;deep-learning-based code clone detection approach;functional code clone detector;real-world code bases;sophisticated functional code clones;code similarity;syntactical features;shallow textual features;existing clone detectors;duplicated code fragments;software prototyping;code reuse;source code;code cloning;attention networks;functional clone detection;hybrid code representation;FCCA,,9.0,,67.0,IEEE,22 Jul 2020,,,IEEE,IEEE Journals
NiCad+: Speeding the Detecting Process of NiCad,C. Feng; T. Wang; J. Liu; Y. Zhang; K. Xu; Y. Wang,"National Laboratary for Parallel and Distributed Processing, College of Computer, National University of Defense Technology, Changsha, China; National Laboratary for Parallel and Distributed Processing, College of Computer, National University of Defense Technology, Changsha, China; National Laboratary for Parallel and Distributed Processing, College of Computer, National University of Defense Technology, Changsha, China; National Laboratary for Parallel and Distributed Processing, College of Computer, National University of Defense Technology, Changsha, China; National Laboratary for Parallel and Distributed Processing, College of Computer, National University of Defense Technology, Changsha, China; National Laboratary for Parallel and Distributed Processing, College of Computer, National University of Defense Technology, Changsha, China",2020 IEEE International Conference on Service Oriented Systems Engineering (SOSE),1 Sep 2020,2020,,,103,110,"With the development of the Internet and the construction of open source software communities, there has been a surge in open source software. Code Reuse—copy-past and modify open source code, which becomes a convenient choice for developers to save time and reduce labor costs. So there are more and more similar code fragments, code clones, in code project as a popular phenomenon. The code clone may import uncertainties into the program, which is a hot spot for urgent exploration. This paper summarized code clone detection tools and techniques in four categories at present and introduced one detection tool, NiCad, with high recall and precision. However, NiCad is not perfect for large-scale code clone detection scenarios, because NiCad is slow when dealing with large-scale of codes. Therefore, we speeded the detection process of NiCad, and and named the improved tool NiCad+. We greatly improved the efficiency of NiCad without effecting its recall and precision. The time-cost of detecting code clone was remarkable shortened by reducing the matching times. When testing with BigCloneEval, it only takes 28.43% time-cost as original NiCad. When testing with varying input sizes, the speeded detection process performs better than the original one from 10 KLoC (lines of code) to 5 MLoC.",2642-6587,978-1-7281-6972-9,10.1109/SOSE49046.2020.00019,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9183401,"code clone detection, NiCad, large scale, similarity, open source software",Cloning;Tools;Open source software;Semantics;Syntactics;Heuristic algorithms,public domain software;software maintenance;source code (software),open source software communities;code reuse;open source code;code fragments;code project;code clone detection tools;large-scale code clone detection scenarios;NiCad tool,,2.0,,30.0,IEEE,1 Sep 2020,,,IEEE,IEEE Conferences
Detecting Java Code Clones with Multi-granularities Based on Bytecode,D. Yu; J. Wang; Q. Wu; J. Yang; J. Wang; W. Yang; W. Yan,"School of Computer Science and Technology, Hangzhou Dianzi University, Hangzhou, China; School of Computer Science and Technology, Hangzhou Dianzi University, Hangzhou, China; School of Computer Science and Technology, Hangzhou Dianzi University, Hangzhou, China; School of Computer Science and Technology, Hangzhou Dianzi University, Hangzhou, China; School of Computer Science and Technology, Hangzhou Dianzi University, Hangzhou, China; Zhejiang Topcheer Information Technology Co. Ltd, Zhejiang Institute of Computing Technology, Hangzhou, China; Zhejiang Institute of Science and Technology Information, Hangzhou, China",2017 IEEE 41st Annual Computer Software and Applications Conference (COMPSAC),11 Sep 2017,2017,1,,317,326,"Sequences of duplicate code, either with or without modification, are known as code clones or just clones. Code clones are generally considered undesirable for a number of reasons, although they can offer some convenience to developers. The detection of code clones helps to improve the quality of source code through software re-engineering. Numerous methods have been proposed for code clone detection in Java code. However, the existing methods are mostly based on the Java source code, while only a few focus on its bytecode, in fact, the Java bytecode reflects more of the semantic nature of the source code than the source code itself does. In this paper, we propose a novel code clone detection method based on Java bytecode. Using the block-level code fragments extracted from bytecode, it can simultaneously detect code clones at both method level and block level. In addition, during the process of code clone detection, the similarities of both method call sequences and instruction sequences are calculated in order to improve accuracy. We conduct two extensive experiments to evaluate the performance of our method. The results show that the proposed method can detect code clones more effectively than the state-of-the-art methods.",0730-3157,978-1-5386-0367-3,10.1109/COMPSAC.2017.104,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8029624,code clone detection;Java bytecode;instruction;multi-granularities;method call,Cloning;Java;Semantics;Feature extraction;Syntactics;Software;Tools,Java;software maintenance;software tools;source coding,Java source code;Java bytecode;code clone detection method;block-level code fragments;Java code clone detection;software re-engineering;method level;block level;method call sequences;instruction sequences;duplicate code sequences,,6.0,,22.0,,11 Sep 2017,,,IEEE,IEEE Conferences
Multi-threshold token-based code clone detection,Y. Golubev; V. Poletansky; N. Povarov; T. Bryksin,JetBrains Research; Saint Petersburg State University; JetBrains; Saint Petersburg State University,"2021 IEEE International Conference on Software Analysis, Evolution and Reengineering (SANER)",11 May 2021,2021,,,496,500,"Clone detection plays an important role in software engineering. Finding clones within a single project introduces possible refactoring opportunities, and between different projects it could be used for detecting code reuse or possible licensing violations.In this paper, we propose a modification to bag-of-tokens based clone detection that allows detecting more clone pairs of greater diversity without losing precision by implementing a multi-threshold search, i.e. conducting the search several times, aimed at different groups of clones. To combat the increase in operation time that this approach brings about, we propose an optimization that allows to significantly decrease the overlap in detected clones between the searches.We evaluate the method for two different popular clone detection tools on two datasets of different sizes. The implementation of the technique allows to increase the number of detected clones by 40.5-56.6% for different datasets. BigCloneBench evaluation also shows that the recall of detecting Strongly Type-3 clones increases from 37.5% to 59.6%.",1534-5351,978-1-7281-9630-5,10.1109/SANER50967.2021.00053,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9426013,clone detection;token based clone detection;similarity threshold;token length threshold,Conferences;Cloning;Tools;Licenses;Software;Optimization;Software engineering,optimisation;software maintenance;software metrics;software reusability,multithreshold token-based code clone detection;code reuse;bag-of-tokens based clone detection;clone pairs;multithreshold search;clone detection tools;type-3 clones;software engineering;optimization;licensing violations;refactoring opportunities,,1.0,,19.0,,11 May 2021,,,IEEE,IEEE Conferences
Type-2 Code Clone Detection for Dockerfiles,T. Tsuru; T. Nakagawa; S. Matsumoto; Y. Higo; S. Kusumoto,"Graduate School of Information Science and Technology, Osaka University, Japan; Graduate School of Information Science and Technology, Osaka University, Japan; Graduate School of Information Science and Technology, Osaka University, Japan; Graduate School of Information Science and Technology, Osaka University, Japan; Graduate School of Information Science and Technology, Osaka University, Japan",2021 IEEE 15th International Workshop on Software Clones (IWSC),20 Jan 2022,2021,,,1,7,"This paper proposes a Type-2 code clone detection technique for Dockerfiles. Docker is a plat-form for realizing containerized virtual environments that has been attracting significant attention as a technology support for server infrastructures. In Docker, the procedure to realize a virtual environment is de-scribed in the form of a source code called a Dockerfile. Therefore, code clones such as repetitions and duplications with similar structures are often included. In this study, we propose a Type-2 code clone detection technique for deriving patterns within Dockerfiles. More specifically, our technique detects code clones by normalizing tokens properly, separating Docker syntax and shell syntax, and then adopting suﬃx array algorithm for each syntax. We conducted application experiments on approximately 5,000 Dockerfiles available on GitHub and found that our technique could detect Type-2 code clones with a high precision. Our technique derived some patterns in Dockerfiles, such as those used for building a new distribution on a container.",2572-6587,978-1-6654-4287-9,10.1109/IWSC53727.2021.00007,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9679789,,Codes;Conferences;Buildings;Cloning;Virtual environments;Syntactics;Containers,software maintenance;software metrics;source coding,Dockerfile;Type-2 code clone detection technique;virtual environment;Type-2 code clones;Dockerfiles;GitHub;Docker syntax;shell syntax,,,,27.0,CCBY,20 Jan 2022,,,IEEE,IEEE Conferences
Finding repeated strings in code repositories and its applications to code-clone detection,Y. Yamagata; F. Hervé; Y. Fujiwara; K. Inoue,National Institute of Advanced Science and Technology (AIST); University of Nantes; Osaka University; Osaka University,2021 28th Asia-Pacific Software Engineering Conference (APSEC),17 Feb 2022,2021,,,497,502,"Although researchers have created many advanced code-clone detection techniques, more effort is required to realize wide adaptation of these techniques in the industry. One of the reasons behind this is the reliance of these advanced techniques on lexing and parsing programs. Modern programming languages have complex lexical conventions and grammar, which evolve constantly. Therefore, using advanced code-clone detection techniques requires substantial and continuous effort. This paper proposes a lightweight language-independent method to detect code clones by simply finding repeated strings in a code repository, relying on neither lexing nor parsing. The proposed method is based on an efficient technique developed in a bio-informatics context to find repeated strings. We refer to the repeated strings in the source-code as weak Type-1 clones. Because the proposed technique normalizes newlines, tabs, and white spaces into a single white space, it can find clones in which newline positions or indentations are changed, as often in the case when copy-pasting occurs. Although the proposed method only finds verbatim copies, it also makes interesting observations regarding repository structures. Many developers may prefer the proposed simple approach because it is easier to understand than other advanced techniques that use heuristics, approximation, and machine learning.",2640-0715,978-1-6654-3784-4,10.1109/APSEC53868.2021.00057,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9712025,,Industries;Computer languages;Codes;Cloning;Machine learning;White spaces;Grammar,grammars;learning (artificial intelligence);program compilers;program diagnostics;programming languages;software maintenance,source-code;Type-1 clones;repeated strings;code repository;advanced code-clone detection techniques;lexing parsing programs;code clones,,,,17.0,IEEE,17 Feb 2022,,,IEEE,IEEE Conferences
VFDETECT: A vulnerable code clone detection system based on vulnerability fingerprint,Z. Liu; Q. Wei; Y. Cao,"China National Digital Switching System Engineering and Technological Research Center, Zhengzhou, China; China National Digital Switching System Engineering and Technological Research Center, Zhengzhou, China; China National Digital Switching System Engineering and Technological Research Center, Zhengzhou, China",2017 IEEE 3rd Information Technology and Mechatronics Engineering Conference (ITOEC),30 Nov 2017,2017,,,548,553,"Vulnerable code reuse in open source software is a serious threat to software security. However, the existing high-efficiency methods for vulnerable code clone detection have a large number of false-negatives when the code is modified, which results in limited application scenarios. In this paper, we present an innovative fingerprint model to describe the vulnerability code and propose VFDETECT, an efficient system to detect vulnerable code clones based on the fingerprints. Firstly, the fingerprint is constructed by applying hash function to appropriate code blocks in the diff which are preprocessed. Then, VFDETECT detects the vulnerable code clone by matching the preprocessed code blocks in target project with the fingerprint, which is mapped to a bitmap so that can be identified efficiently. VFDETECT could maintain better performance and acquire higher robustness under multiple code modification methods such as variable renaming, code sequence changing and redundancy inserting, which is difficult to achieve in existing research work. Our results in real-world datasets detection demonstrate that it is of practical values.",,978-1-5090-5363-6,10.1109/ITOEC.2017.8122356,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8122356,vulnerability fingerprint;code clone;vulnerability detection,Cloning;Fingerprint recognition;Feature extraction;Linux;Kernel;Data structures,cryptography;public domain software;software maintenance,appropriate code blocks;VFDETECT;preprocessed code blocks;multiple code modification methods;code sequence;redundancy inserting;real-world datasets detection;vulnerable code clone detection system;vulnerability fingerprint;vulnerable code reuse;open source software;innovative fingerprint model;vulnerability code;high-efficiency methods;software security;hash function;bitmap,,14.0,,14.0,,30 Nov 2017,,,IEEE,IEEE Conferences
A function level Java code clone detection method,J. Yang; Y. Xiong; J. Ma,"School of Computer Science, Beijing University of Posts and Telecommunications, Beijing, China; School of Computer Science, Beijing University of Posts and Telecommunications, Beijing, China; China Information Technology Security Evaluation Center, Beijing, China","2019 IEEE 4th Advanced Information Technology, Electronic and Automation Control Conference (IAEAC)",13 Feb 2020,2019,1,,2128,2134,"In this article, we mainly propose a method of function level code clone detection for Java language. The method includes a source code preprocessing strategy which unifies some Java grammatical features such as lambda expressions, anonymous classes and generics through code preprocessing. After the source code is preprocessed, the function extraction is performed to get all functions from source code, and then a filtering mechanism is carried out to filter out the useless comparing pairs with large difference in sequence length. Finally, we combine the longest common subsequence algorithm and the suffix array algorithm to perform the similarity calculation according to the size of the function. The experimental results in twenty open source software show that our method improves both accuracy and efficiency.",2381-0947,978-1-7281-1907-6,10.1109/IAEAC47372.2019.8998079,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8998079,code clone;function based code clone;Lambda;suffix array;code pretreatment,Cloning;Java;Grammar;Feature extraction;Syntactics;Filtering;Filtering algorithms,Java;public domain software;software engineering;source code (software),Java grammatical features;function extraction;open source software show;function level Java code clone detection method;Java language;source code preprocessing strategy,,,,28.0,,13 Feb 2020,,,IEEE,IEEE Conferences
A Large-Gap Clone Detection Approach Using Sequence Alignment via Dynamic Parameter Optimization,J. Liu; T. Wang; C. Feng; H. Wang; D. Li,"Science and Technology on Parallel and Distributed Processing Laboratory, College of Computer, National University of Defense Technology, Changsha, China; Science and Technology on Parallel and Distributed Processing Laboratory, College of Computer, National University of Defense Technology, Changsha, China; Science and Technology on Parallel and Distributed Processing Laboratory, College of Computer, National University of Defense Technology, Changsha, China; Science and Technology on Parallel and Distributed Processing Laboratory, College of Computer, National University of Defense Technology, Changsha, China; Science and Technology on Parallel and Distributed Processing Laboratory, College of Computer, National University of Defense Technology, Changsha, China",IEEE Access,23 Sep 2019,2019,7,,131270,131281,"Large-gap clones, a kind of clones that reuses code with many edits, are very common in software development practice and widespread in software systems. The detection of such clones is very crucial. However, due to a large number of edits, most of the current work fails to detect such clones effectively. This paper aims to find an effective approach for accurate detection of large-gap clones. We transform the code clone detection problem into a biological sequence alignment question and propose a novel approach that combines code fingerprint with sequence alignment. The sequence alignment is Smith-Waterman algorithm based, but shows significant improvements using dynamic parameter acquisition strategy. Furthermore, we design new rational criteria for clone identification. The proposed approach is automatically evaluated extensively by more than 10 million lines of code for general clones detection. We further conduct an empirical study on five large-scale Java projects to manually measure the approach for large-gap clones detection. The experimental results show that the proposed approach can effectively detect large-gap clones and exhibit good performance, and at the same time remains the competitiveness with existing advanced detection tools in detecting general clone detection.",2169-3536,,10.1109/ACCESS.2019.2940710,National Grand Research and Development Plan(grant numbers:2018YFB1004202); National Natural Science Foundation of China(grant numbers:61432020); Laboratory of Software Engineering for Complex Systems; ,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8834785,Code clone detection;dynamic parameter acquisition strategy;large-gap clone;sequence alignment,Cloning;Heuristic algorithms;Tools;Software systems;Transforms;Hash functions,dynamic programming;Java;optimisation;software maintenance,dynamic parameter acquisition strategy;clone identification;general clones detection;large-gap clones detection;detection tools;general clone detection;large-gap clone detection approach;dynamic parameter optimization;software development practice;code clone detection problem;biological sequence alignment question;code fingerprint;Java projects,,7.0,,43.0,CCBY,12 Sep 2019,,,IEEE,IEEE Journals
MSCCD: Grammar Pluggable Clone Detection Based on ANTLR Parser Generation,W. Zhu; N. Yoshida; T. Kamiya; E. Choi; H. Takada,"Nagoya University, Nagoya, Aichi, Japan; Nagoya University, Nagoya, Aichi, Japan; Shimane University, Matsue, Shimane, Japan; Kyoto Institute of Technology, Kyoto, Kyoto, Japan; Nagoya University, Nagoya, Aichi, Japan",2022 IEEE/ACM 30th International Conference on Program Comprehension (ICPC),22 Jun 2022,2022,,,460,470,"For various reasons, programming languages continue to multiply and evolve. It has become necessary to have a multilingual clone detection tool that can easily expand supported programming languages and detect various code clones is needed. However, research on multilingual code clone detection has not received sufficient attention. In this study, we propose MSCCD (Multilingual Syntactic Code Clone Detector), a grammar pluggable code clone detection tool that uses a parser generator to generate a code block extractor for the target language. The extractor then extracts the semantic code blocks from a parse tree. MSCCD can detect Type-3 clones at various granularities. We evaluated MSCCD's language extensibility by applying MSCCD to 20 modern languages. Sixteen languages were perfectly supported, and the remaining four were provided with the same detection capabilities at the expense of execution time. We evaluated MSCCD's recall by using BigCloneEval and conducted a manual experiment to evaluate precision. MSCCD achieved equivalent detection performance equivalent to state-of-the-art tools.",2643-7171,978-1-4503-9298-3,10.1145/3524610.3529161,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9796305,Code Clone;Parser Generator;Clone Detection;Syntactic Analysis;Programming Language,Computer languages;Codes;Semantics;Cloning;Manuals;Detectors;Syntactics,grammars;Java;program diagnostics;programming languages;public domain software;software maintenance,programming languages;multilingual clone detection tool;code clones;multilingual code clone detection;Multilingual Syntactic Code Clone Detector;grammar pluggable code clone detection tool;parser generator;code block extractor;target language;semantic code blocks;Type-3 clones;MSCCD's language extensibility;20 modern languages;sixteen languages;MSCCD's recall;equivalent detection performance equivalent;grammar pluggable Clone detection;ANTLR parser generation,,,,45.0,,22 Jun 2022,,,IEEE,IEEE Conferences
Java Code Clone Detection by Exploiting Semantic and Syntax Information From Intermediate Code-Based Graph,D. Yuan; S. Fang; T. Zhang; Z. Xu; X. Luo,"School of Computer Science and Engineering, Macau University of Science and Technology, Macao, China; School of Computer Science and Engineering, Macau University of Science and Technology, Macao, China; School of Computer Science and Engineering, Macau University of Science and Technology, Macao, China; School of Big Data and Software Engineering, Chongqing University, Chongqing, China; Department of Computing, The Hong Kong Polytechnic University, Hong Kong, China",IEEE Transactions on Reliability,,2022,PP,99.0,1,16,"Code clone detection plays a critical role in the field of software engineering. To achieve this goal, developers are required to have rich development experience for finding the “functional” clone code. However, this is unfriendly to novice developers. Although many approaches were proposed to automatically detect code clones, the results are not satisfactory. A major reason is that it is difficult to extract syntax and semantic information from the source code. To resolve this problem, in this article, we develop a novel graph representation approach based on intermediate code to detect the functional code clones. This graph representation is built based on intermediate code compiled from the source code. By using it, we can easily utilize graph embedding techniques to extract syntactic and semantic features from abstract syntax tree, control flow graph, and DFG generated from intermediate code. After that, we use the Softmax classifier to detect functional code clone pairs. We evaluate the performance of the proposed graph representation approach based on intermediate code for the code clone detection task on the BigCloneBench dataset. In order to improve performance, the embedded representation of intermediate code is initialized based on pretrained vectors learned from the collected LLVM IR dataset in advance. The experimental results show that our proposed intermediate code-based graph approach performs better than existing functional code clone detection approaches. Especially for the type-4 code clone detection, our approach outperforms the baseline approaches by an average of 33.49% in the term of <italic>F</italic>1 score.",1558-1721,,10.1109/TR.2022.3176922,Science and Technology Development Fund of Macau(grant numbers:0047/2020/A1); China Postdoctoral Science Foundation(grant numbers:2017M621247); Natural Science Foundation of Heilongjiang Province(grant numbers:LH2019F008); Hong Kong RGC Project(grant numbers:PolyU15222320); ,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9792461,Abstract syntax tree (AST);clone code detection;control flow graph (CFG);data flow graph (DFG);graph embedding;intermediate code,Codes;Cloning;Syntactics;Semantics;Data mining;Task analysis;Feature extraction,,,,,,,IEEE,9 Jun 2022,,,IEEE,IEEE Early Access Articles
CLCDSA: Cross Language Code Clone Detection using Syntactical Features and API Documentation,K. W. Nafi; T. S. Kar; B. Roy; C. K. Roy; K. A. Schneider,"Schneider Department of Computer Science, University of Saskatchewan, Saskatoon, Saskatchewan, Canada; Schneider Department of Computer Science, University of Saskatchewan, Saskatoon, Saskatchewan, Canada; Schneider Department of Computer Science, University of Saskatchewan, Saskatoon, Saskatchewan, Canada; Schneider Department of Computer Science, University of Saskatchewan, Saskatoon, Saskatchewan, Canada; Schneider Department of Computer Science, University of Saskatchewan, Saskatoon, Saskatchewan, Canada",2019 34th IEEE/ACM International Conference on Automated Software Engineering (ASE),9 Jan 2020,2019,,,1026,1037,"Software clones are detrimental to software maintenance and evolution and as a result many clone detectors have been proposed. These tools target clone detection in software applications written in a single programming language. However, a software application may be written in different languages for different platforms to improve the application's platform compatibility and adoption by users of different platforms. Cross language clones (CLCs) introduce additional challenges when maintaining multi-platform applications and would likely go undetected using existing tools. In this paper, we propose CLCDSA, a cross language clone detector which can detect CLCs without extensive processing of the source code and without the need to generate an intermediate representation. The proposed CLCDSA model analyzes different syntactic features of source code across different programming languages to detect CLCs. To support large scale clone detection, the CLCDSA model uses an action filter based on cross language API call similarity to discard non-potential clones. The design methodology of CLCDSA is two-fold: (a) it detects CLCs on the fly by comparing the similarity of features, and (b) it uses a deep neural network based feature vector learning model to learn the features and detect CLCs. Early evaluation of the model observed an average precision, recall and F-measure score of 0.55, 0.86, and 0.64 respectively for the first phase and 0.61, 0.93, and 0.71 respectively for the second phase which indicates that CLCDSA outperforms all available models in detecting cross language clones.",2643-1572,978-1-7281-2508-4,10.1109/ASE.2019.00099,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8952189,Code Clone;API documentation;Word2Vector;Source Code Syntax,Cloning;Feature extraction;Java;Software systems;Syntactics,application program interfaces;feature extraction;learning (artificial intelligence);neural nets;program diagnostics;programming languages;software maintenance;source code (software),software application;programming language;cross language API call similarity;deep neural network based feature vector;cross language code clone detection;syntactical features;software clones;software maintenance;CLCDSA model;API documentation;deep neural network;feature vector learning model;source code analysis,,14.0,,63.0,,9 Jan 2020,,,IEEE,IEEE Conferences
Semantic code clone detection using abstract memory states and program dependency graphs,H. Nasirloo; F. Azimzadeh,"University of Science & Culture, Tehran, Iran; Scientific Information Database (SID), ACECR, Tehran, Iran",2018 4th International Conference on Web Research (ICWR),18 Jun 2018,2018,,,19,27,"The most important issue in software engineering is to produce efficient and high quality software with good services after sales. For this reason, software engineers introduced a special category called “Software Evolution”, in which the goal is to improving software after production. One of the basic subjects in software evolution is code clones or the duplicated code snippets in software. In fact, code clones detection may be introduced as the foundation of Software Evolution, in this way most topics in Software Evolution depends on the detection of code clones. In addition to other methods, two methods have been introduced yet, behavioral method (slower but more accurate) and memory state based method (faster with medium accuracy). In this research, the goal is to find more clones with a better accuracy than the Abstract Memory State (AMS) based method (Reduction of False Negative). To do this, the combinations of two methods of AMS and Program Dependency Graph (PDG) have been used. The method of executing code snippets is also used with random values. The method presented in this study is compared with the AMS based method and results show that it can detect more code clones than Memory State Based method, and reduced false negatives.",,978-1-5386-5364-7,10.1109/ICWR.2018.8387232,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8387232,Software engineering;software evolution;code clones;semantic clones,Cloning;Software;Semantics;Software engineering;Syntactics;Current measurement,program diagnostics;program slicing;software maintenance;software quality,semantic code clone detection;abstract memory states;program dependency graphs;software engineering;software evolution;duplicated code snippets;behavioral method;AMS based method;abstract memory state based method;program dependency graph;false negative reduction;PDG,,2.0,,31.0,,18 Jun 2018,,,IEEE,IEEE Conferences
A Novel Code Stylometry-based Code Clone Detection Strategy,W. Dong; Z. Feng; H. Wei; H. Luo,"Beijing Key Lab of Intelligent Telecomm, Software and Multimedia Beijing University of Posts and Telecomm, Beijing, China; Dongfang Middle School, Shandong, China; Beijing Key Lab of Intelligent Telecomm, Software and Multimedia Beijing University of Posts and Telecomm, Beijing, China; Beijing Key Lab of Intelligent Telecomm, Software and Multimedia Beijing University of Posts and Telecomm, Beijing, China",2020 International Wireless Communications and Mobile Computing (IWCMC),27 Jul 2020,2020,,,1516,1521,"Program similarity-based detection can be used to discover potential code cloning issues. However, just based on the similarity of the program, it is difficult to accurately identify code clones with modified syntax and program similarity does not directly reflect the possibility of code plagiarism. In this paper, we propose a program similarity detection strategy with code stylometry matcher to solve this problem. Firstly, the code stylometry model based on the random forest classifier is used to identify a list of possible authors. If the code submitter is not in this list, we analyze the similarity between the submitted code and the program submitted by the author in the list to determine whether there is code cloning. In this way, we can effectively reduce the complexity of program similarity comparison. We propose a PBCS method based on parallel Bidirectional Long Short-Term(Bi-Lstm) Memory network for code similarity detection. This model effectively improves the accuracy of detection by supervising deep features extracted from AST and token. Experimental results show that the recall of the proposed method is 84%, which is improved compared to other methods.",2376-6506,978-1-7281-3129-0,10.1109/IWCMC48107.2020.9148302,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9148302,code similarity;Bi-Lstm;code stylometry,Feature extraction;Cloning;Syntactics;Plagiarism;Forestry;Layout;Vegetation,feature extraction;program diagnostics;recurrent neural nets;source code (software),code similarity detection;program similarity-based detection;code plagiarism;code stylometry matcher;code submitter;code clone detection;parallel bidirectional long short-term memory network,,1.0,,8.0,,27 Jul 2020,,,IEEE,IEEE Conferences
Stubber: Compiling Source Code into Bytecode without Dependencies for Java Code Clone Detection,A. Schäfer; W. Amme; T. S. Heinze,"Institute of Computer Science, Friedrich Schiller University Jena, Jena, Germany; Institute of Computer Science, Friedrich Schiller University Jena, Jena, Germany; Institute of Data Science, German Aerospace Center (DLR), Jena, Germany",2021 IEEE 15th International Workshop on Software Clones (IWSC),20 Jan 2022,2021,,,29,35,"A lot of clone detection tools for Java have been introduced in recent years. On the one hand, many of these tools work on Java source code and can thus be conveniently evaluated with the state-of-the-art benchmark BigCloneBench and evaluation framework BigCloneEval. On the other hand, certain clone detectors deliberately address the Bytecode and cannot be applied to Java source code. Simple compilation often does not solve the problem due to missing required dependencies, as, e.g., in case of BigCloneBench. In this work, we therefore present the tool STUBBER for compiling Java source code into Bytecode without dependencies. We can show that using Stubber, Bytecode for over 95% of all Java source files and 92.5% of all code clones contained in BigCloneBench can be successfully generated. As a consequence, the evaluation of Bytecode-based clone detectors on BigCloneBench becomes possible and such tools can also be applied to Java source files, even beyond BigCloneBench.",2572-6587,978-1-6654-4287-9,10.1109/IWSC53727.2021.00011,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9679787,Bytecode;BigCloneBench;code clone;clone detection;compilation,Java;Codes;Conferences;Cloning;Detectors;Benchmark testing;Software,Java;program compilers;program diagnostics;software maintenance;source code (software),source code compiling;Java code clone detection;Java source code;BigCloneBench;Java source files;Bytecode-based clone detectors;Stubber;BigCloneEval,,,,38.0,,20 Jan 2022,,,IEEE,IEEE Conferences
Program Slice Based Vulnerable Code Clone Detection,X. Song; A. Yu; H. Yu; S. Liu; X. Bai; L. Cai; D. Meng,"School of Cyber Security, University of Chinese Academy of Sciences, Beijing, China; School of Cyber Security, University of Chinese Academy of Sciences, Beijing, China; School of Cyber Security, University of Chinese Academy of Sciences, Beijing, China; School of Cyber Security, University of Chinese Academy of Sciences, Beijing, China; School of Cyber Security, University of Chinese Academy of Sciences, Beijing, China; School of Cyber Security, University of Chinese Academy of Sciences, Beijing, China; School of Cyber Security, University of Chinese Academy of Sciences, Beijing, China","2020 IEEE 19th International Conference on Trust, Security and Privacy in Computing and Communications (TrustCom)",9 Feb 2021,2020,,,293,300,"Vulnerabilities in software will not only lead to security problems of the software itself, but also cause the spread of vulnerabilities through code clones. It is important to detect and locate vulnerabilities among the source code to facilitate the fix. Although many methods are proposed to detect code clones in source code, most of them fail to detect code clones that involve statement addition and deletion effectively or are not suitable for vulnerability detection. In this paper, we propose a method that can detect vulnerabilities caused by code clones. Program slices are used to filter statements that are not related to vulnerabilities and extract important vulnerable statements in function. Hash function and bitvector are applied to improve efficiency during the detection. The results are displayed in html, among which the vulnerable statements are highlighted to help subsequent patching work. Our method is evaluated on open source software (Openssl, Linux Kernel, FFmpeg and QEMU). The results of experiments show that our method detects 12.72% more vulnerable clones in acceptable time compared with Vuddy, proving the effectiveness of our method.",2324-9013,978-1-6654-0392-4,10.1109/TrustCom50675.2020.00049,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9342999,vulnerability detection;code clone;program slice;program analysis,Hash functions;Databases;Linux;Cloning;Security;Kernel;Open source software,Linux;operating system kernels;program slicing;public domain software;security of data;software maintenance,program slice;vulnerable code clone detection;code clones;source code;vulnerability detection;important vulnerable statements;open source software;vulnerable clones,,,,24.0,,9 Feb 2021,,,IEEE,IEEE Conferences
Enhancing program dependency graph based clone detection using approximate subgraph matching,C. M. Kamalpriya; P. Singh,"Bombardier Transportation India Pvt. Limited, Vadodara, India; National Institute of Technology, Jalandhar, India",2017 IEEE 11th International Workshop on Software Clones (IWSC),20 Mar 2017,2017,,,1,7,"Software code clone detection techniques and tools play a major role in improving the software quality as well as saving maintenance cost and effort. Program Dependency Graph (PDG) based clone detection techniques have a key advantage over other techniques as they are capable of detecting non-contiguous code clones in addition to contiguous clones. We propose further enhancement to current state of the art PDG-based detection to identify all possible (exact and approximate) clone relations from the obtained clone pair (PDG-based) results using Approximate Subgraph Matching (ASM). We obtain clone results of our proposed technique on three subject software systems, and validate the results on eclipse-ant from Bellon's benchmark. We also present a new ASM-based distance measure to represent the similarity between software code clones.",,978-1-5090-6595-0,10.1109/IWSC.2017.7880511,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7880511,Software Clone Detection;Clone Relations;Approximate Clones;Subsumed Clones;Program Dependency Graph;Software Maintenance,Cloning;Approximation algorithms;Image edge detection;Software systems;Algorithm design and analysis;Indexes,graph theory;pattern matching;software maintenance;software quality;software tools,program dependency graph based clone detection;approximate subgraph matching;software code clone detection;software tools;software quality;software maintenance cost;PDG-based clone detection;noncontiguous code clone detection;software systems;eclipse-ant;Bellon benchmark;ASM-based distance measure,,8.0,,16.0,,20 Mar 2017,,,IEEE,IEEE Conferences
A Survey of Software Clone Detection From Security Perspective,H. Zhang; K. Sakurai,"Department of Informatics, Graduate School of Information Science and Electrical Engineering, Kyushu University, Fukuoka, Japan; Department of Informatics, Faculty of Information Science and Electrical Engineering, Kyushu University, Fukuoka, Japan",IEEE Access,31 Mar 2021,2021,9,,48157,48173,"For software engineering, if two code fragments are closely similar with minor modifications or even identical due to a copy-paste behavior, that is called software/code clone. Code clones can cause trouble in software maintenance and debugging process because identifying all copied compromised code fragments in other locations is time-consuming. Researchers have been working on code clone detection issues for a long time, and the discussion mainly focuses on software engineering management and system maintenance. Another considerable issue is that code cloning provides an easy way to attackers for malicious code injection. A thorough survey work of code clone identification/detection from the security perspective is indispensable for providing a comprehensive review of existing related works and proposing future potential research directions. This paper can satisfy above requirements. We review and introduce existing security-related works following three different classifications and various comparison criteria. We then discuss three further research directions, (i) deep learning-based code clone vulnerability detection, (ii) vulnerable code clone detection for 5G-Internet of Things devices, and (iii) real-time detection methods for more efficiently detecting clone attacks. These methods are more advanced and adaptive to technological development than current technologies, and still have enough research space for future studies.",2169-3536,,10.1109/ACCESS.2021.3065872,Collaboration Hubs for International Program (CHIRP) of Strategic International Collaborative Research Program (SICORP) through the Japan Science and Technology Agency (JST); ,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9378511,Code clone;security analysis;software clone;vulnerability detection,Cloning;Software;Security;Tools;Task analysis;Maintenance engineering;Computer bugs,deep learning (artificial intelligence);Internet of Things;program debugging;security of data;software maintenance,deep learning;real-time detection methods;clone attacks;software clone detection;copy-paste behavior;software maintenance;debugging process;code fragments;code clone detection;software engineering management;system maintenance;malicious code injection;security-related works;code clone vulnerability detection;5G-Internet of Things,,1.0,,99.0,CCBY,15 Mar 2021,,,IEEE,IEEE Journals
Cloned Buggy Code Detection in Practice Using Normalized Compression Distance,T. Ishio; N. Maeda; K. Shibuya; K. Inoue,"Nara Institute of Science and Technology, Nara, Japan; NEC Corporation, Tokyo, Japan; NEC Corporation, Tokyo, Japan; Osaka University, Osaka, Japan",2018 IEEE International Conference on Software Maintenance and Evolution (ICSME),11 Nov 2018,2018,,,591,594,"Software developers often write similar source code fragments in a software product. Since such code fragments may include the same mistake, developers have to inspect code clones if they found a bug in their code. In this study, we developed a tool to detect clones of a faulty code fragment for a software company, since existing code clone detection tools do not fit the requirements of the company. The tool employs Normalized Compression Distance for source code comparison, because its definition is understandable for developers, and also it is easy to support multiple programming languages. We conducted two experiments using an existing research dataset and actual examples. Based on the evidence, the tool has been deployed in several projects in the company.",2576-3148,978-1-5386-7870-1,10.1109/ICSME.2018.00022,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8530071,Code clone detection;Source code similarity;Source code search;Bug fix;Development tool,Tools;Cloning;Companies;Computer bugs;Benchmark testing;Microsoft Windows,program debugging;programming languages;public domain software;software engineering;source code (software),faulty code fragment;code clone detection tools;buggy code detection;software developers;software product;normalized compression distance;source code;software company;programming languages,,7.0,,18.0,,11 Nov 2018,,,IEEE,IEEE Conferences
Semantic based Cross-Language Clone Related Bug Detection,Z. Chen,"National University of Defense Technology, Changsha, China","2021 2nd International Seminar on Artificial Intelligence, Networking and Information Technology (AINIT)",8 Mar 2022,2021,,,494,499,"Code clones are widespread in software since programmers always reuse code to reduce programming effort. As programming languages are continuing to evolve and morph, code clones also widely exist across different languages for platform compatibility and adoption. Although code clones can improve development efficiency, they are prone to introducing bugs. Existing code clone detection technologies, however, mainly focused on single programming language or syntactical features of code. The syntax of different programming language are diverse because of syntax sugar, and many cloning pairs are semantic related instead of syntactic similar, such as Type 4 clones. To bridge the gap between syntax and semantic, and detect clone-related bugs more accurately, we explore an IR (Intermediate Representation) based method to represent code semantic representation information of multiple language code. We utilize graph neural network to learn code semantic representation. Through the semantic representation, we can detect more cross-language clone related bugs across multiple language.",,978-1-6654-1296-4,10.1109/AINIT54228.2021.00101,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9725021,component;code clone detection;bug detection;machine learning;cross language,Seminars;Computer languages;Codes;Semantics;Computer bugs;Cloning;Syntactics,graph theory;learning (artificial intelligence);neural nets;program compilers;program debugging;program diagnostics;software maintenance;software tools,clone-related bugs;code semantic representation information;multiple language code;semantic based cross-language clone related bug detection;code clones;programming effort;programming languages;code clone detection technologies;single programming language;different programming language;cloning pairs;Type 4 clones,,,,20.0,IEEE,8 Mar 2022,,,IEEE,IEEE Conferences
Improving Clone Detection Precision Using Machine Learning Techniques,V. Arammongkolvichai; R. Koschke; C. Ragkhitwetsagul; M. Choetkiertikul; T. Sunetnanta,"Faculty of Information and Communication Technology (ICT), Mahidol University, Thailand; University of Bremen, Germany; Faculty of Information and Communication Technology (ICT), Mahidol University, Thailand; Faculty of Information and Communication Technology (ICT), Mahidol University, Thailand; Faculty of Information and Communication Technology (ICT), Mahidol University, Thailand",2019 10th International Workshop on Empirical Software Engineering in Practice (IWESEP),30 Dec 2019,2019,,,31,315,"Code clones or similar segments of code in a software project can be detected by using a clone detection tool. Due to modifications applied after copying and pasting of the cloned code, the current code clone detection tools face challenges to accurately detect clones with heavy modifications (i.e., Type-3 clones or clones with added/deleted/modified statements). One challenge is because the clone results contain several false positives. In this paper, we propose an approach for increasing the precision of code clone detection using machine learning techniques. By training a decision tree on 19 clone class metrics, we use the trained decision tree as a clone filter by placing it in the last step in the clone detection pipeline. This aims to remove false positive clone classes reported by a clone detection tool. We found that the decision tree clone filter is helpful for decreasing the number of false positive clone classes in iClones, a well-known code clone detector. After training the decision tree on 537 clone classes in JFreeChart and evaluating it on the test data set, it could improve iClone's precision from 0.94 to 0.98. The findings show that decision tree can be used effectively for filtering false positive clones. Nonetheless, we found that the filter is only effective for Java and does not offer satisfying performance when running on a Django Python project.",2573-2021,978-1-7281-5590-6,10.1109/IWESEP49350.2019.00014,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8945086,code clones;machine learning;decision tree,Cloning;Decision trees;Measurement;Training;Machine learning;Detectors;Data models,decision trees;learning (artificial intelligence);software metrics;software tools,trained decision tree;clone detection pipeline;clone detection tool;decision tree clone filter;machine learning techniques;code clone detection tools;clone class metrics;iClones;JFreeChart;software project,,,,22.0,,30 Dec 2019,,,IEEE,IEEE Conferences
From Local to Global Semantic Clone Detection,Y. Yuan; W. Kong; G. Hou; Y. Hu; M. Watanabe; A. Fukuda,"School of Software Technology, Dalian University of Technology, Dalian, China; School of Software Technology, Dalian University of Technology, Dalian, China; School of Software Technology, Dalian University of Technology, Dalian, China; School of Software Technology, Dalian University of Technology, Dalian, China; CATS Co. Ltd., Japan; Graduate School of IS & EE, Kyushu University, Fukuoka, Japan",2019 6th International Conference on Dependable Systems and Their Applications (DSA),26 Mar 2020,2020,,,13,24,"Clone detection detects similar code fragments (refer to as clone code) in software products. It can help with software optimization and maintenance. Code clone detection can be divided into textual, lexical, syntactic and semantic levels. The existing technologies have achieved many good results in the first three levels, but no significant results have been obtained in semantic clone detection. In this paper, we propose a novel semantic level clone detection approach. We use the control flow graph (CFG) as an intermediate representation of the program method, combining the classical dynamic time warping (DTW) algorithm in the field of speech recognition with two deep neural network models (bidirectional RNN autoencoder and graph convolutional network (GCN)) to detect semantic level clone from local to global. We experimented with a dataset consisting of five large-scale real-world systems and a code corpus containing a large number of programming problems. The experimental results show that our approach can achieve good results in detecting both local and global semantic clone.",,978-1-7281-6057-3,10.1109/DSA.2019.00012,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9045812,clone detection;semantic clone;deep learning;dynamic time warping,Recurrent neural networks;Heuristic algorithms;Semantics;Cloning;Speech recognition;Syntactics;Programming,convolutional neural nets;graph theory;program diagnostics;recurrent neural nets;software maintenance;speech recognition,deep neural network models;graph convolutional network;global semantic clone detection;software products;software optimization;software maintenance;code clone detection;textual levels;lexical levels;syntactic levels;control flow graph;dynamic time warping algorithm;semantic level clone detection approach;local semantic clone detection;CFG;GCN;speech recognition;bidirectional RNN autoencoder,,1.0,,38.0,,26 Mar 2020,,,IEEE,IEEE Conferences
Semantic Clone Detection: Can Source Code Comments Help?,A. Ghosh; S. K. Kuttal,"Tandy School of Computer Science, University of Tulsa; Tandy School of Computer Science, University of Tulsa",2018 IEEE Symposium on Visual Languages and Human-Centric Computing (VL/HCC),25 Oct 2018,2018,,,315,317,"Programmers reuse code to increase their productivity, which leads to large fragments of duplicate or near-duplicate code in the code base. The current code clone detection techniques for finding semantic clones utilize Program Dependency Graphs (PDG), which are expensive and resource-intensive. PDG and other clone detection techniques utilize code and have completely ignored the comments - due to ambiguity of English language, but in terms of program comprehension, comments carry the important domain knowledge. We empirically evaluated the accuracy of detecting clones with both code and comments on a JHotDraw package. Results show that detecting code clones in the presence of comments, Latent Dirichlet Allocation (LDA), gave 84% precision and 94% recall, while in the presence of a PDG, using GRAPLE, we got 55% precision and 29% recall. These results indicate that comments can be used to find semantic clones. We recommend utilizing comments with LDA to find clones at the file level and code with PDG for finding clones at the function level. These findings necessitate a need to reexamine the assumptions regarding semantic clone detection techniques.",1943-6106,978-1-5386-4235-1,10.1109/VLHCC.2018.8506550,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8506550,,Cloning;Semantics;Software maintenance;Software systems;Reverse engineering;Visualization,graph theory;software reusability;source code (software),semantic clone detection techniques;code base;Program Dependency Graphs;PDG;source code;code reuse;code clone detection techniques;JHotDraw package;Latent Dirichlet Allocation;LDA,,2.0,,19.0,,25 Oct 2018,,,IEEE,IEEE Conferences
Enhancing Notation-Based Code Cloning Method With an External-Based Identifier Model,N. -T. Chau; S. Jung,"School of Electronic Engineering, Soongsil University, Seoul, South Korea; School of Electronic Engineering, Soongsil University, Seoul, South Korea",IEEE Access,14 Sep 2020,2020,8,,162989,162998,"Code clone detection is known for solving code paradigm problem in software development. Malware analysts also apply this technique to detect whether a set of malware applications originated from the same malware family based on the similarity in their source code. Until now, existing notation-based approaches are based on standard identifier notations and generating signatures from the notations output. Specifically, for a set of words (or lexemes), the analysts apply rules to determine the type of a lexeme and label each lexeme with a token type. So far, none of the existing code clone detection models considers collecting identifiers from an external source. In this paper, we propose a novel External-based Identifier Model for code clone detection. The proposed model assumes the existence of an external source code that can be used as a supervisor for identifying and labeling a specific set of lexemes. By introducing the external-identifiers into source code detection, our model could distinguish between multiple fragments of code that share the same sequence of standard tokens. One of the study cases for our model is Android analysis where the Android Open Source Project can be used as an external source. The experiment on one millions line of Android source code has shown that our proposed solution could reduce the number of multiple code mapping to single signature situations in comparison with the traditional method. Furthermore, the experiment on code suggestion has proved that our model could reduce the suggestion step for providing faster output than a notation-based approach.",2169-3536,,10.1109/ACCESS.2020.3016943,"Institute of Information & communications Technology Planning & Evaluation (IITP); Korea Government (MSIT) (Development of 5G Edge Security Technology for Ensuring 5G+ Service Stability and Availability)(grant numbers:2020-0-00952); Ministry of Science and ICT (MSIT), Korea Government through the Information Technology Research Center (ITRC); Institute for Information & Communications Technology Planning & Evaluation (IITP)(grant numbers:IITP-2020-2020-0-01602); ",https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9169649,Program analysis;code clone detection,Syntactics;Cloning;Androids;Humanoid robots;Standards;Security;Tools,invasive software;mobile computing;program diagnostics;software maintenance;software reliability;source code (software),notation-based code cloning method;code paradigm problem;malware analysts;malware applications;malware family;standard identifier notations;notations output;lexeme;external source code;source code detection;Android Open Source Project;Android source code;multiple code mapping;code suggestion;notation-based approach;external-based identifier model;software development,,,,35.0,CCBY,17 Aug 2020,,,IEEE,IEEE Journals
SemanticCloneBench: A Semantic Code Clone Benchmark using Crowd-Source Knowledge,F. Al-Omari; C. K. Roy; T. Chen,"Department of Computer Science, University of Saskatchewan, Saskatoon, Canada; Department of Computer Science, University of Saskatchewan, Saskatoon, Canada; Department of Computer Science, University of Saskatchewan, Saskatoon, Canada",2020 IEEE 14th International Workshop on Software Clones (IWSC),26 Mar 2020,2020,,,57,63,"Not only do newly proposed code clone detection techniques, but existing techniques and tools also need to be evaluated and compared. This evaluation process could be done by assessing the reported clones manually or by using benchmarks. The main limitations of available benchmarks include: they are restricted to one programming language; they have a limited number of clone pairs that are confined within the selected system(s); they require manual validation; they do not support all types of code clones. To overcome these limitations, we proposed a methodology to generate a wide range of semantic clone benchmark(s) for different programming languages with minimal human validation. Our technique is based on the knowledge provided by developers who participate in the crowd-sourced information website, Stack Overflow. We applied automatic filtering, selection and validation to the source code in Stack Overflow answers. Finally, we build a semantic code clone benchmark of 4000 clones pairs for the languages Java, C, C# and Python.",2572-6587,978-1-7281-6269-0,10.1109/IWSC50091.2020.9047643,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9047643,Semantic clone;Functional equivalent;Stack Overflow;Benchmark,Cloning;Semantics;Benchmark testing;Syntactics;Tools;Manuals;Computer languages,crowdsourcing;Java;software engineering;software maintenance;software tools;source code (software),semantic code clone benchmark;crowd-source knowledge;code clone detection techniques;evaluation process;reported clones;available benchmarks;clone pairs;manual validation;code clones;semantic clone benchmark;source code;clones pairs;crowd-sourced information Website,,3.0,,34.0,,26 Mar 2020,,,IEEE,IEEE Conferences
Test-Based Clone Detection: an Initial Try on Semantically Equivalent Methods,G. Li; H. Liu; Y. Jiang; J. Jin,"School of Computer Science and Technology, Beijing Institute of Technology, Beijing, China; School of Computer Science and Technology, Beijing Institute of Technology, Beijing, China; School of Computer Science and Technology, Beijing Institute of Technology, Beijing, China; School of Computer Science and Technology, Beijing Institute of Technology, Beijing, China",IEEE Access,23 Dec 2018,2018,6,,77643,77655,"Most code clone detection approaches identify clones via static source code analysis. Such approaches are effective and efficient in detecting lexically similar clones. However, they are less effective in detecting semantic clones that are similar in functionality but different in implementation. As an initial try to detect semantic clones, in this paper, we propose a test-based approach to detecting methods that are semantically equivalent to API methods. For a given method m, we generate its test cases automatically and search for semantically equivalent API methods by running the generated test cases. If two methods generate the same output on each of the test cases, they are taken as semantically equivalent methods. One of the weakness of test-based clone detection is that it is often time consuming. To reduce the time complexity, we take the following measures. First, we focus on methods instead of arbitrary fragments. Second, for a given method, we only compare it against such API methods whose signatures are highly similar to that of the given method. We evaluate the proposed approach on 10 well-known applications. Evaluation results suggest that it is efficient and accurate, and its precision is up to 98%.",2169-3536,,10.1109/ACCESS.2018.2883699,"National Natural Science Foundation of China(grant numbers:61690205,61472034,61772071); National Key Research and Development Program of China(grant numbers:2016YFB1000801); ",https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8550632,Clone detection;semantic equivalence;test-driven;lexical similarity,Cloning;Semantics;Java;Time complexity;Open source software;Time measurement;Syntactics,application program interfaces;program testing;software maintenance;software metrics,test-based clone detection;semantically equivalent methods;code clone detection approaches;static source code analysis;lexically similar clones;semantic clones;test-based approach;semantically equivalent API methods;generated test cases,,2.0,,84.0,OAPA,28 Nov 2018,,,IEEE,IEEE Journals
A technique to detect multi-grained code clones,Y. Yuki; Y. Higo; S. Kusumoto,"Osaka Daigaku, Suita, Osaka, JP; Graduate School of Information Science and Technology, Osaka University, Japan; Graduate School of Information Science and Technology, Osaka University, Japan",2017 IEEE 11th International Workshop on Software Clones (IWSC),20 Mar 2017,2017,,,1,7,"It is said that the presence of code clones makes software maintenance more difficult. For such a reason, it is important to understand how code clones are distributed in source code. A variety of code clone detection tools has been developed before now. Recently, some researchers have detected code clones from a large set of source code to find library candidates or overlooked bugs. In general, the smaller the granularity of the detection target is, the longer the detection time. On the other hand, the larger the granularity of the detection target is, the fewer detectable code clones are. In this paper, we propose a technique that detects in order from coarse code clones to fine-grained ones. In the coarse-tofine- grained-detections, code fragments detected as code clones at a certain granularity are excluded from detection targets of more fine-grained detections. Our proposed technique can detect code clones faster than fine-grained detection techniques. Besides, it can detect more code clones than coarse detection techniques.",,978-1-5090-6595-0,10.1109/IWSC.2017.7880510,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7880510,multi-grained detection technique;file-level clone;method-level clone;code-fragment-level clone,Cloning;Software;Libraries;Computer bugs;Filtering;Java;Information science,software maintenance;source code (software),multigrained code clone detection;software maintenance;source code;detection target granularity;coarse-to-fine-grained-clone detection;code fragment detection,,3.0,,11.0,,20 Mar 2017,,,IEEE,IEEE Conferences
Detecting Code Clones with Graph Neural Network and Flow-Augmented Abstract Syntax Tree,W. Wang; G. Li; B. Ma; X. Xia; Z. Jin,"Institute of Software, EECS, Peking University, Beijing, China; Institute of Software, EECS, Peking University, Beijing, China; Institute of Software, EECS, Peking University, Beijing, China; Faculty of Information Technology, Monash University, Melbourne, Australia; Institute of Software, EECS, Peking University, Beijing, China","2020 IEEE 27th International Conference on Software Analysis, Evolution and Reengineering (SANER)",2 Apr 2020,2020,,,261,271,"Code clones are semantically similar code fragments pairs that are syntactically similar or different. Detection of code clones can help to reduce the cost of software maintenance and prevent bugs. Numerous approaches of detecting code clones have been proposed previously, but most of them focus on detecting syntactic clones and do not work well on semantic clones with different syntactic features. To detect semantic clones, researchers have tried to adopt deep learning for code clone detection to automatically learn latent semantic features from data. Especially, to leverage grammar information, several approaches used abstract syntax trees (AST) as input and achieved significant progress on code clone benchmarks in various programming languages. However, these AST-based approaches still can not fully leverage the structural information of code fragments, especially semantic information such as control flow and data flow. To leverage control and data flow information, in this paper, we build a graph representation of programs called flow-augmented abstract syntax tree (FA-AST). We construct FA-AST by augmenting original ASTs with explicit control and data flow edges. Then we apply two different types of graph neural networks (GNN) on FA-AST to measure the similarity of code pairs. As far as we have concerned, we are the first to apply graph neural networks on the domain of code clone detection. We apply our FA-AST and graph neural networks on two Java datasets: Google Code Jam and BigCloneBench. Our approach outperforms the state-of-the-art approaches on both Google Code Jam and BigCloneBench tasks.",1534-5351,978-1-7281-5143-4,10.1109/SANER48275.2020.9054857,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9054857,clone detection;data flow;control flow;deep learning;graph neural network,Software maintenance;Java;Codes;Semantics;Cloning;Syntactics;Feature extraction,learning (artificial intelligence);neural nets;program debugging;program diagnostics;software maintenance;trees (mathematics),code clone detection;data flow information;FA-AST;graph neural network;syntactic clones;flow-augmented abstract syntax tree;software maintenance;bug prevention;graph representation;code fragment pair similarity;deep learning,,30.0,,24.0,IEEE,2 Apr 2020,,,IEEE,IEEE Conferences
Detecting Java Code Clones Based on Bytecode Sequence Alignment,D. Yu; J. Yang; X. Chen; J. Chen,"School of Computer Science and Technology, Hangzhou Dianzi University, Hangzhou, China; School of Computer Science and Technology, Hangzhou Dianzi University, Hangzhou, China; School of Computer Science and Technology, Hangzhou Dianzi University, Hangzhou, China; School of Computer Science and Technology, Hangzhou Dianzi University, Hangzhou, China",IEEE Access,28 Feb 2019,2019,7,,22421,22433,"When the source code is copied and pasted or modified, there will be a lot of identical or similar code snippets in the software system, which are called code clones. Because code clones are believed to result in undesirable maintainability of software, numerous approaches and techniques have been proposed for code clone detection. However, most of them are based on the source code, while only a few employ the bytecode to detect code clones. In this paper, we introduce an approach based on Java bytecode, which mainly contains the steps of bytecode sequence alignment and similarity score comparison. In particular, we apply the Smith-Waterman algorithm to align bytecode sequences for precise matching. Moreover, we separately consider the similarities between instruction sequences and method call sequences, thus improving its effectiveness in detecting code clones. We conducted an extensive experiment on five open-source software to evaluate the proposed approach. The results show that our approach outperforms other state-of-the-art techniques.",2169-3536,,10.1109/ACCESS.2019.2898411,"National Natural Science Foundation of China(grant numbers:61472112,61702144); Key Science and Technology Project of Zhejiang Province(grant numbers:2017C01010); Natural Science Foundation of Zhejiang Province(grant numbers:LY12F02003); ",https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8637956,Code clones;code clone detection;Java bytecode;code sequence alignment;code similarities;instruction block;method call sequences,Cloning;Java;Tools;Heuristic algorithms;Software systems;Syntactics,Java;public domain software;software maintenance;source code (software),Java code clones detection;Smith-Waterman algorithm;open-source software;software maintenance;identical code snippets;bytecode sequence alignment;Java bytecode;source code;similar code snippets,,7.0,,25.0,OAPA,8 Feb 2019,,,IEEE,IEEE Journals
Influence of Contrastive Learning on Source Code Plagiarism Detection through Recursive Neural Networks,M. A. Fokam; R. Ajoodha,"School of Computer Science and Applied Mathematics, The University of the Witwatersrand, Johannesburg, South Africa; School of Computer Science and Applied Mathematics, The University of the Witwatersrand, Johannesburg, South Africa",2021 3rd International Multidisciplinary Information Technology and Engineering Conference (IMITEC),21 Feb 2022,2021,,,1,6,"Plagiarism during programming assignments is a problem in academia. It hinders the ability of academic instructors to truly judge students’ performance and thus, prevents students from receiving adequate help from their instructors. In cases where the number of code submissions for a particular assignment is relatively small, the instructor can inspect each code submission to determine whether they are similar. But as the number of code submissions grows, it becomes difficult to detect similarities between them. Therefore, this induces the need for an automatic source code plagiarism detector. Previous studies showed that we could use the abstract syntax tree (AST) of a source code to get an accurate representation of the source code for neural network computations. Although a study even presented a recursive artificial neural network named Abstract Syntax Tree-based Neural Network (ASTNN) that could represent source codes into vector embeddings using their ASTs, it does not use contrastive learning paradigms, shown to increase the performance of Siamese networks in similarity detection tasks. Therefore, this paper presents an improved version of the ASTNN for code clone detection, where we modify the original model for contrastive learning. Experiments demonstrated that we outperform the original ASTNN model in code clone detection tasks, with a+5% improvement in the F1-score of our model. This study aims at improving the way we perform similarity detection tasks involving programming languages.",,978-1-6654-1749-5,10.1109/IMITEC52926.2021.9714688,National Research Foundation; ,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9714688,Plagiarism detection;Programming Languages;Abstract Syntax Trees;Deep Learning,Tree data structures;Codes;Plagiarism;Computational modeling;Cloning;Transforms;Learning (artificial intelligence),computational linguistics;computer aided instruction;computer science education;learning (artificial intelligence);neural nets;program diagnostics;source code (software);trees (mathematics),recursive neural networks;programming assignments;academic instructors;code submission;automatic source code plagiarism detector;neural network computations;recursive artificial neural network;contrastive learning paradigms;Siamese networks;similarity detection tasks;code clone detection tasks;abstract syntax tree-based neural network;ASTNN;vector embeddings;contrastive learning;F1-score,,,,17.0,IEEE,21 Feb 2022,,,IEEE,IEEE Conferences
Detecting and analyzing code clones in HDL,K. Uemura; A. Mori; K. Fujiwara; E. Choi; H. Iida,"National Institute of Advanced Industrial Science and Technology, Japan; National Institute of Advanced Industrial Science and Technology, Japan; Toyota College, National Institute of Technology, Japan; Nara Institute of Science and Technology, Japan; Nara Institute of Science and Technology, Japan",2017 IEEE 11th International Workshop on Software Clones (IWSC),20 Mar 2017,2017,,,1,7,"In this paper, we study code clones in hardware description languages (HDLs) in comparison with general programming languages. For this purpose, we have developed a method for detecting code clones in Verilog HDL. A key idea of the proposed method is to convert the Verilog HDL code into the pseudo C++ code, which is then processed by an existing code clone detector for C++. We conducted an experiment on 10 open source hardware products described in Verilog HDL, where we succeeded in detecting nearly 1,800 clone sets with approximately 80% precision. We compared code clones in Verilog HDL with those in Java/C based on the metrics to identify the differences among languages. We identified patterns on how code clones are created in Verilog HDL, which include cases for increasing stability and capability of parallel processing of the circuit.",,978-1-5090-6595-0,10.1109/IWSC.2017.7880501,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7880501,,Hardware design languages;Cloning;C++ languages;Field programmable gate arrays;Measurement;Open source hardware,hardware description languages;parallel processing,code clone analysis;code clone detection;hardware description languages;Verilog HDL code;pseudoC++ code;open source hardware products;parallel processing,,2.0,,23.0,,20 Mar 2017,,,IEEE,IEEE Conferences
Code Similarity Detection Based on Siamese Network,Y. Wu; W. Wang,"Yunnan University College of Software, Kunming, China; Yunnan University College of Software, Kunming, China",2021 IEEE International Conference on Information Communication and Software Engineering (ICICSE),23 Apr 2021,2021,,,47,51,"At present, with the continuous expansion of software scale, problems such as plagiarism, clone and reuse in software code become increasingly prominent, and the study of code similarity plays an important role. The existing studies have problems such as inaccurate representation of code semantic information and insufficient acquisition of word vector feature information. To solve the above problems, this paper proposes a code similarity calculation model based on a deep learning framework. This method firstly expresses the source code semantics. Secondly, it uses the Siamese network to extract semantic feature information. Finally, it utilizes the cosine distance to calculate the similarity of feature vector in high-dimensional space. Experiments have proved that our method has better performance in terms of precision, recall and F1 compared with the baseline method. For this reason, our method can effectively obtain code semantic information and improve the performance of code similarity measurement.",,978-1-6654-1919-2,10.1109/ICICSE52190.2021.9404110,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9404110,deep learning;Siamese network;code similarity;sentence embedding,Deep learning;Computer languages;Java;Plagiarism;Conferences;Semantics;Feature extraction,deep learning (artificial intelligence);feature extraction;software maintenance;source code (software);vectors,word vector feature information;source code semantics;Siamese network;feature vector;deep learning;semantic feature information extraction;software code clone detection;software code similarity detection;software maintenance,,1.0,,20.0,,23 Apr 2021,,,IEEE,IEEE Conferences
Detection of near-miss clones using metrics and Abstract Syntax Trees,Vishwachi; S. Gupta,"Ajay Kumar Garg Engineering College, Ghaziabad, Uttar Pradesh, IN; Ajay Kumar Garg Engineering College, Ghaziabad, Uttar Pradesh, IN",2017 International Conference on Inventive Communication and Computational Technologies (ICICCT),17 Jul 2017,2017,,,230,234,"Reusing code segments via copying and pasting is quite common practice in the process of software development. The pasted segment may include minor differences from the original segment. As a result of copying and pasting, several code sections may be similar to each other. Such sections are referred to as code clones. This paper presents an approach for detection of these code clones. The reason for detecting them is that they generate problem at the time of software maintenance. The method adopted in this paper involves the use of metrics and Abstract Syntax Trees.",,978-1-5090-5297-4,10.1109/ICICCT.2017.7975193,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7975193,Clones;Metrics;AST,Cloning;Measurement;Software;Syntactics;Conferences;Complexity theory;Tools,computational linguistics;software maintenance;software metrics,code clone detection;metrics;abstract syntax trees;code segment reuse;software development;code copying;code pasting;software maintenance,,,,14.0,,17 Jul 2017,,,IEEE,IEEE Conferences
Using compilation/decompilation to enhance clone detection,C. Ragkhitwetsagul; J. Krinke,"University College London, UK; University College London, UK",2017 IEEE 11th International Workshop on Software Clones (IWSC),23 Mar 2017,2017,,,1,7,"We study effects of compilation and decompilation to code clone detection in Java. Compilation/decompilation canonicalise syntactic changes made to source code and can be used as source code normalisation. We used NiCad to detect clones before and after decompilation in three open source software systems, JUnit, JFreeChart, and Tomcat. We filtered and compared the clones in the original and decompiled clone set and found that 1,201 clone pairs (78.7%) are common between the two sets while 326 pairs (21.3%) are only in one of the sets. A manual investigation identified 325 out of the 326 pairs as true clones. The 252 original-only clone pairs contain a single false positive while the 74 decompiled-only clone pairs are all true positives. Many clones in the original source code that are detected only after decompilation are type-3 clones that are dicult to detect due to added or deleted statements, keywords, package names; flipped if-else statements; or changed loops. We suggest to use decompilation as normalisation to compliment clone detection. By combining clones found before and after decompilation, one can achieve higher recall without losing precision.",,978-1-5090-6595-0,10.1109/IWSC.2017.7880502,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7880502,,Cloning;Java;Detectors;Software systems;Manuals;Open source software,Java;program compilers;public domain software;software maintenance;source code (software),compilation effects;decompilation effects;code clone detection;Java;syntactic changes;source code normalisation;NiCad;open source software systems;JUnit;JFreeChart;and;Tomcat;decompiled-only clone pairs;original-only clone pairs;true clones;false positive clone pairs;true positive clone pairs,,15.0,,27.0,,23 Mar 2017,,,IEEE,IEEE Conferences
Accurate and Scalable Cross-Architecture Cross-OS Binary Code Search with Emulation,Y. Xue; Z. Xu; M. Chandramohan; Y. Liu,"University of Science of Technology of China, Hefei, China; Nanyang Technological University, Singapore; Nanyang Technological University, Singapore; Nanyang Technological University, Singapore",IEEE Transactions on Software Engineering,12 Nov 2019,2019,45,11.0,1125,1149,"Different from source code clone detection, clone detection (similar code search) in binary executables faces big challenges due to the gigantic differences in the syntax and the structure of binary code that result from different configurations of compilers, architectures and OSs. Existing studies have proposed different categories of features for detecting binary code clones, including CFG structures, n-gram in CFG, input/output values, etc. In our previous study and the tool BinGo, to mitigate the huge gaps in CFG structures due to different compilation scenarios, we propose a selective inlining technique to capture the complete function semantics by inlining relevant library and user-defined functions. However, only features of input/output values are considered in BinGo. In this study, we propose to incorporate features from different categories (e.g., structural features and high-level semantic features) for accuracy improvement and emulation for efficiency improvement. We empirically compare our tool, BinGo-E, with the pervious tool BinGo and the available state-of-the-art tools of binary code search in terms of search accuracy and performance. Results show that BinGo-E achieves significantly better accuracies than BinGo for cross-architecture matching, cross-OS matching, cross-compiler matching and intra-compiler matching. Additionally, in the new task of matching binaries of forked projects, BinGo-E also exhibits a better accuracy than the existing benchmark tool. Meanwhile, BinGo-E takes less time than BinGo during the process of matching.",1939-3520,,10.1109/TSE.2018.2827379,National Research Foundation(grant numbers:NRF2014NCR-NCR001-30); CAS Pioneer Hundred Talents Program of China; ,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8338420,Binary code search;binary clone detection;vulnerability matching;emulation;3D-CFG,Binary codes;Semantics;Tools;Feature extraction;Cloning;Syntactics;Emulation,binary codes;Java;program compilers;program diagnostics;public domain software,source code clone detection;similar code search;binary executables;binary code clones;CFG structures;selective inlining technique;structural features;high-level semantic features;BinGo-E;cross-architecture matching;cross-OS matching;cross-compiler matching;intra-compiler matching;BinGo tool;compilation scenario;cross-architecture cross-OS binary code search,,9.0,,59.0,IEEE,16 Apr 2018,,,IEEE,IEEE Journals
SAGA: Efficient and Large-Scale Detection of Near-Miss Clones with GPU Acceleration,G. Li; Y. Wu; C. K. Roy; J. Sun; X. Peng; N. Zhan; B. Hu; J. Ma,"Shanghai Key Laboratory of Data Science, Shanghai, China; Shanghai Key Laboratory of Data Science, Shanghai, China; University of Saskatchewan, Canada; Singapore Management University, Singapore; Shanghai Key Laboratory of Data Science, Shanghai, China; Shanghai Key Laboratory of Data Science, Shanghai, China; Shanghai Key Laboratory of Data Science, Shanghai, China; School of Computer Science, Fudan University, Shanghai, China","2020 IEEE 27th International Conference on Software Analysis, Evolution and Reengineering (SANER)",2 Apr 2020,2020,,,272,283,"Clone detection on large code repository is necessary for many big code analysis tasks. The goal is to provide rich information on identical and similar code across projects. Detecting near-miss code clones on big code is challenging since it requires intensive computing and memory resources as the scale of the source code increases. In this work, we propose SAGA, an efficient suffix-array based code clone detection tool designed with sophisticated GPU optimization. SAGA not only detects Type-l and Type-2 clones but also does so for cross-project large repositories and for the most computationally expensive Type-3 clones. Meanwhile, it also works at segment granularity, which is even more challenging. It detects code clones in 100 million lines of code within 11 minutes (with recall and precision comparable to state-of-the-art approaches), which is more than 10 times faster than state-of-the-art tools. It is the only tool that efficiently detects Type-3 near-miss clones at segment granularity in large code repository (e.g., within 11 hours on 1 billion lines of code). We conduct a preliminary case study on 85,202 GitHub Java projects with 1 billion lines of code and exhibit the distribution of clones across projects. We find about 1.23 million Type-3 clone groups, containing 28 million lines of code at arbitrary segment granularity, which are only detectable with SAGA. We believe SAGA is useful in many software engineering applications such as code provenance analysis, code completion, change impact analysis, and many more.",1534-5351,978-1-7281-5143-4,10.1109/SANER48275.2020.9054832,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9054832,clone detection;near-miss clone;segment clone;GPU acceleration;big code,Java;Codes;Memory management;Cloning;Graphics processing units;Software;Task analysis,graphics processing units;Java;program diagnostics;public domain software;software engineering;software maintenance;source code (software),code clones;source code;SAGA;cross-project large repositories;code repository;suffix-array based code clone detection tool;GitHub Java projects;Type-3 near-miss clones;software engineering;GPU acceleration;big code analysis,,3.0,,63.0,,2 Apr 2020,,,IEEE,IEEE Conferences
An Exploratory Study on Interface Similarities in Code Clones,M. R. H. Misu; A. Satter; K. Sakib,"Dhaka University, Dhaka, Dhaka District, BD; Institute of Information Technology, University of Dhaka, Dhaka, Bangladesh; Institute of Information Technology, University of Dhaka, Dhaka, Bangladesh",2017 24th Asia-Pacific Software Engineering Conference Workshops (APSECW),12 Mar 2018,2017,,,126,133,"Code cloning is one of the most popular code reusing techniques where similar pieces of code are replicated within or between code repositories. Interface similarity is a kind of replication that refers to the similarity of method names, return types and parameter types which repeat across the code repositories. Two methods with similar interfaces are prone to be cloned if those perform analogous functions either entirely or at least partially. An exploratory study is performed in this paper, to explore the relationship and effects of interface similarity in code clones. It is investigated that interface similarity can be helpful for code clone detection. First, clone methods are detected in code repositories. Then, interface information is extracted from source code and several interface similarities are measured using that information. The experimental corpus contains three different types of code repositories with 35, 109 and 24,558 Java projects respectively. The detected clone pairs in three code repositories are, on average 57,457, 102,745 and 123,576 respectively. Promising results are found as it shows on average 87.91% intra-project and 59.17% inter-project clones contain similar interfaces (i.e., return types and at least one keyword and one parameter type are similar). Besides, the average similarity of interfaces in Type-1, Type-2 and Type-3 clones are 100%, 83.47% and 81.90% respectively. These results prove the strong relationship between code clones and interface similarities. In future, it can be useful to design and develop interface driven clone detection tools.",,978-1-5386-2649-8,10.1109/APSECW.2017.24,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8312535,Code Clone;Clone Detection;Exploratory Study,Cloning;Java;Tools;Data mining;Information technology;Electronic mail;Benchmark testing,Java;software reusability;source code (software),Type-3 clones;code clones;interface similarity;code cloning;code repositories;return types;parameter type;code clone detection;clone methods;source code;Type-1 clones;Type-2 clones;code reusing;Java projects,,3.0,,25.0,,12 Mar 2018,,,IEEE,IEEE Conferences
An Exploratory Study on Code Attention in BERT,R. Sharma; F. Chen; F. Fard; D. Lo,"University of British Columbia, Canada; University of British Columbia, Canada; University of British Columbia, Canada; Singapore Management University, Singapore",2022 IEEE/ACM 30th International Conference on Program Comprehension (ICPC),22 Jun 2022,2022,,,437,448,"Many recent models in software engineering introduced deep neural models based on the Transformer architecture or use transformer-based Pre-trained Language Models (PLM) trained on code. Although these models achieve the state of the arts results in many downstream tasks such as code summarization and bug detection, they are based on Transformer and PLM, which are mainly studied in the Natural Language Processing (NLP) field. The current studies rely on the reasoning and practices from NLP for these models in code, despite the differences between natural languages and programming languages. There is also limited literature on explaining how code is modeled. Here, we investigate the attention behavior of PLM on code and compare it with natural language. We pre-trained BERT, a Transformer based PLM, on code and explored what kind of information it learns, both semantic and syntactic. We run several experiments to analyze the attention values of code constructs on each other and what BERT learns in each layer. Our analyses show that BERT pays more attention to syntactic entities, specifically identifiers and separators, in contrast to the most attended token [CLS] in NLP. This observation motivated us to leverage identifiers to represent the code sequence instead of the [CLS] token when used for code clone detection. Our results show that employing embeddings from identifiers increases the performance of BERT by 605% and 4% F1-score in its lower layers and the upper layers, respectively. When identifiers' embeddings are used in CodeBERT, a code-based PLM, the performance is improved by 21-24% in the F1-score of clone detection. The findings can benefit the research community by using code-specific representations instead of applying the common embeddings used in NLP, and open new directions for developing smaller models with similar performance.",2643-7171,978-1-4503-9298-3,10.1145/3524610.3527921,Natural Sciences and Engineering Research Council of Canada(grant numbers:RGPIN-2019-05175); ,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9796241,pre-trained language models;BERT;CodeBERT;attention,Codes;Particle separators;Bit error rate;Semantics;Cloning;Syntactics;Transformers,learning (artificial intelligence);natural language processing;neural nets;program debugging;software engineering;source code (software);text analysis,code attention;software engineering;deep neural model;transformer architecture;code summarization;bug detection;NLP;programming languages;attention behavior;code constructs;code sequence;code clone detection;code-based PLM;code-specific representation;bug detection;transformer-based pretrained language model;code modeling;CodeBERT;semantic information;syntactic information,,,,50.0,,22 Jun 2022,,,IEEE,IEEE Conferences
CCSharp: An Efficient Three-Phase Code Clone Detector Using Modified PDGs,M. Wang; P. Wang; Y. Xu,"School of Computer Science, University of Science and Technology of China, Anhui, China; School of Computer Science, University of Science and Technology of China, Anhui, China; School of Computer Science, University of Science and Technology of China, Anhui, China",2017 24th Asia-Pacific Software Engineering Conference (APSEC),5 Mar 2018,2017,,,100,109,"Detecting code clones in software systems is becoming more and more important with the blossom of open source projects. In spite of numerous active researches, there is still a lack of detecting clones especially high-level clones efficiently and accurately. In this paper, we present CCSharp, a three-phase PDG-based clone detector which can detect much more clones besides high-level ones in software systems. To solve the problem of PDG-based tool's high time cost, we adopt two strategies to decrease the overall computing quantity of our tool: PDG's structure modification and characteristic vector filtering. In PDG's structure modification, we propose a novel technique to merge procedure invocation nodes which can make clone detection get rid of influence of procedure's parameters and disguise as well as downscale PDG's structure. We proceed clone detection on both real-world and artificial codebase by CCSharp along with other three state-of-the-art tools. Experiment results show that CCSharp has both high recall and precision, and can detect much more unique clones compared with the other three tools.",,978-1-5386-3681-7,10.1109/APSEC.2017.16,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8305932,code clone detection;program dependence graph;PDG modification;characteristic vector filtering,Cloning;Tools;Software;Syntactics;Handheld computers;Merging;Semantics,program diagnostics;public domain software;software reusability,code clones;software systems;open source projects;high-level clones;three-phase PDG;PDG's structure modification;clone detection;downscale PDG's structure;CCSharp;three-phase code clone detector;modified PDGs,,12.0,,30.0,,5 Mar 2018,,,IEEE,IEEE Conferences
LibDX: A Cross-Platform and Accurate System to Detect Third-Party Libraries in Binary Code,W. Tang; P. Luo; J. Fu; D. Zhang,"School of Software, Tsinghua University, Beijing, China; School of Software, Tsinghua University, Beijing, China; School of Software, Tsinghua University, Beijing, China; School of Software, Tsinghua University, Beijing, China","2020 IEEE 27th International Conference on Software Analysis, Evolution and Reengineering (SANER)",2 Apr 2020,2020,,,104,115,"With the development of the open-source movement, third-party library reuse is commonly practiced in programming. Application developers can reuse the code to save time and development costs. However, there are some hidden risks in misusing third-party libraries such as license violation and security vulnerability. The identification of libraries written in C or C++ is impeded by compilation process which hides most features of code. The same open-source package can be compiled into different binary code by different compilation processes. Therefore, this paper proposes LibDX, a platform-independent and fully-automated system, to detect reused libraries in binary files. With a well-designed feature extractor, LibDX can overcome compilation diversity between binary files. LibDX novelly introduces the logic feature block concept which is applied to deal with the feature duplication challenge in a large-scale feature database. We built a large test data set covering multiple platforms and evaluated LibDX with 9.5K packages including 25.8K C/C++ binary files. Our results show that LibDX achieves a precision of 92% and a recall of 97%, and outperforms state-of-the-art tools. We have validated the performance of the system with closed source commercial applications and found some license violation cases.",1534-5351,978-1-7281-5143-4,10.1109/SANER48275.2020.9054845,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9054845,Mining Software Repositories;License Violation;Code Clone Detection;Software Analysis,Databases;Operating systems;Semantics;Cloning;Binary codes;Licenses;Feature extraction,binary codes;program compilers;public domain software;security of data;software libraries;software reusability,logic feature block concept;feature duplication challenge;large-scale feature database;LibDX;binary files;closed source commercial applications;cross-platform;third-party libraries;open-source movement;third-party library reuse;application developers;license violation;security vulnerability;compilation process;open-source package;binary code;platform-independent;reused libraries;feature extractor;fully-automated system;C++,,4.0,,76.0,,2 Apr 2020,,,IEEE,IEEE Conferences
Clone Detection in Test Code: An Empirical Evaluation,B. van Bladel; S. Demeyer,"University of Antwerp, Belgium; Flanders Make vzw, Belgium","2020 IEEE 27th International Conference on Software Analysis, Evolution and Reengineering (SANER)",2 Apr 2020,2020,,,492,500,"Duplicated test code (a.k.a. test code clones) has a negative impact on test comprehension and maintenance. Moreover, the typical structure of unit test code induces structural similarity, increasing the amount of duplication. Yet, most research on software clones and clone detection tools is focused on production code, often ignoring test code. In this paper we fill this gap by comparing four different clone detection tools (NiCad, CPD, iClones, TCORE) against the test code of three open-source projects. Our analysis confirms the prevalence of test code clones, as we observed between 23% and 29% test code duplication. We also show that most of the tools suffer from false negatives (NiCad = 83%, CPD = 84%, iClones = 21%, TCORE = 65%), which leaves ample room for improvement. These results indicate that further research on test clone detection is warranted.",1534-5351,978-1-7281-5143-4,10.1109/SANER48275.2020.9054798,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9054798,software clones;unit-tests;code clone detection,Codes;Conferences;Cloning;Production;Maintenance engineering;Benchmark testing;Reliability engineering,program testing;public domain software;software maintenance,TCORE;iClones;CPD;NiCad;test code duplication;test clone detection;test code clones;clone detection tools;production code;software clones;unit test code;maintenance;test comprehension,,2.0,,29.0,,2 Apr 2020,,,IEEE,IEEE Conferences
Image-Based Clone Code Detection and Visualization,Y. Wang; D. Liu,"College of Computer Science and Technology, Inner Mongolia Normal University, Hohhot, China; College of Computer Science and Technology, Inner Mongolia Normal University, Hohhot, China",2019 International Conference on Artificial Intelligence and Advanced Manufacturing (AIAM),9 Jan 2020,2019,,,168,175,"Currently, research mainly focuses on four perspectives of text, vocabulary, grammar and semantics in the field of clone code detection. However, few breakthroughs have been made in the effect of clone code detection for a long time. For this purpose, a new image-based clone code detection and visualization (ICCV) is proposed with the inspiration of image processing. First, the source code is preprocessed by removing comments, whitespace, etc. from which a ""clean"" function fragment can be obtained, and the identifiers, keywords, etc. in the function can also be highlighted; Then the processed source code is converted into images and these images are normalized; Finally, Jaccard distance and perceptual hash algorithm are used to detect and visualize the clone code information. In order to verify the validity of the experiment, six open source software were used to constitute the evaluation data set for testing. The experimental results show that ICCV can detect 100% type-1 clone code, 88% type-2 clone code and 60% type-3 clone code, which proves the good effect of ICCV on clone code detection.",,978-1-7281-4691-1,10.1109/AIAM48774.2019.00041,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8950911,"clone code, clone detection, visualization, Jaccard distance, perceptual hash.",,cryptography;data visualisation;image processing;program diagnostics;public domain software;software maintenance;source code (software),image processing;clone code information;type-1 clone code;type-2 clone code;type-3 clone code;visualization;image-based clone code detection;source code processing;Jaccard distance;perceptual hash algorithm;open source software;software maintenance,,1.0,,38.0,,9 Jan 2020,,,IEEE,IEEE Conferences
SLACC: Simion-based Language Agnostic Code Clones,G. Mathew; C. Parnin; K. T. Stolee,North Carolina State University; North Carolina State University; North Carolina State University,2020 IEEE/ACM 42nd International Conference on Software Engineering (ICSE),21 Dec 2020,2020,,,210,221,"Successful cross-language clone detection could enable researchers and developers to create robust language migration tools, facilitate learning additional programming languages once one is mastered, and promote reuse of code snippets over a broader codebase. However, identifying cross-language clones presents special challenges to the clone detection problem. A lack of common underlying representation between arbitrary languages means detecting clones requires one of the following solutions: 1) a static analysis framework replicated across each targeted language with annotations matching language features across all languages, or 2) a dynamic analysis framework that detects clones based on runtime behavior. In this work, we demonstrate the feasibility of the latter solution, a dynamic analysis approach called SLACC for cross-language clone detection. Like prior clone detection techniques, we use input/output behavior to match clones, though we overcome limitations of prior work by amplifying the number of inputs and covering more data types; and as a result, achieve better clusters than prior attempts. Since clusters are generated based on input/output behavior, SLACC supports cross-language clone detection. As an added challenge, we target a static typed language, Java, and a dynamic typed language, Python. Compared to HitoshiIO, a recent clone detection tool for Java, SLACC retrieves 6 times as many clusters and has higher precision (86.7% vs. 30.7%). This is the first work to perform clone detection for dynamic typed languages (precision = 87.3%) and the first to perform clone detection across languages that lack a common underlying representation (precision = 94.1%). It provides a first step towards the larger goal of scalable language migration tools.",1558-1225,978-1-4503-7121-6,,"National Science Foundation(grant numbers:1645136,1749936); ",https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9283951,semantic code clone detection;cross-language analysis,Java;Runtime;Semantics;Cloning;Static analysis;Tools;Python,Java;learning (artificial intelligence);program diagnostics;programming languages;public domain software;reverse engineering;software libraries;software maintenance,SLACC;simion-based language agnostic code clones;successful cross-language clone detection;robust language migration tools;additional programming languages;cross-language clones;clone detection problem;common underlying representation;arbitrary languages;targeted language;language features;dynamic analysis framework;prior clone detection techniques;static typed language;dynamic typed language;recent clone detection tool;scalable language migration tools,,,,52.0,,21 Dec 2020,,,IEEE,IEEE Conferences
Sia-RAE: A Siamese Network based on Recursive AutoEncoder for Effective Clone Detection,C. Feng; T. Wang; Y. Yu; Y. Zhang; Y. Zhang; H. Wang,"National Laboratory for Parallel and Distributed Processing, College of Computer, National University of Defense Technology, Changsha, China; National Laboratory for Parallel and Distributed Processing, College of Computer, National University of Defense Technology, Changsha, China; National Laboratory for Parallel and Distributed Processing, College of Computer, National University of Defense Technology, Changsha, China; National Laboratory for Parallel and Distributed Processing, College of Computer, National University of Defense Technology, Changsha, China; National Laboratory for Parallel and Distributed Processing, College of Computer, National University of Defense Technology, Changsha, China; National Laboratory for Parallel and Distributed Processing, College of Computer, National University of Defense Technology, Changsha, China",2020 27th Asia-Pacific Software Engineering Conference (APSEC),1 Mar 2021,2020,,,238,246,"Code clone helps improving programming productivity, while at the same time leads to many negative effects on software maintenance. Many approaches have been proposed to detect clones, but most of them fail on detecting low similarity code snippets. In this paper, we propose a Siamese network which links two recursive autoencoders (RAE) with a comparator network for clone detection. The unweighted recursive autoencoder is designed to learn code representation and then the comparator network is employed for similarity evaluation. In this Siamese network, it takes full advantages of lexical, semantic and structure information, and achieves high accuracy in revealing tiny similarity. We conduct comprehensive experiments on BigCloneBench using tagged clones as well as the whole repository respectively. The results suggest that our approach achieves good accuracy, and its recall reaches 93.02 % in WT3/T4, which outperforms state-of-the-art.",2640-0715,978-1-7281-9553-7,10.1109/APSEC51365.2020.00032,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9359270,code clone detection;Siamese network;recursive auto encoder;learning model;open source software,Productivity;Software maintenance;Semantics;Cloning;Programming;Software engineering,learning (artificial intelligence);neural nets;programming;software maintenance;source code (software),sia-RAE;Siamese network;clone detection;code clone;programming productivity;software maintenance;recursive autoencoders;comparator network;code representation learning;tagged clones;BigCloneBench,,,,37.0,IEEE,1 Mar 2021,,,IEEE,IEEE Conferences
Can Neural Clone Detection Generalize to Unseen Functionalitiesƒ,C. Liu; Z. Lin; J. -G. Lou; L. Wen; D. Zhang,"School of Software, Tsinghua University; Microsoft Research Asia; Microsoft Research Asia; School of Software, Tsinghua University; Microsoft Research Asia",2021 36th IEEE/ACM International Conference on Automated Software Engineering (ASE),20 Jan 2022,2021,,,617,629,"Many recently proposed code clone detectors exploit neural networks to capture latent semantics of source code, thus achieving impressive results for detecting semantic clones. These neural clone detectors rely on the availability of large amounts of labeled training data. We identify a key oversight in the current evaluation methodology for neural clone detection: cross-functionality generalization (i.e., detecting semantic clones of which the functionalities are unseen in training). Specifically, we focus on this question: do neural clone detectors truly learn the ability to detect semantic clones, or they just learn how to model specific functionalities in training data while cannot generalize to realistic unseen functionalitiesƒ This paper investigates how the generalizability can be evaluated and improved.Our contributions are 3-folds: (1) We propose an evaluation methodology that can systematically measure the cross-functionality generalizability of neural clone detection. Based on this evaluation methodology, an empirical study is conducted and the results indicate that current neural clone detectors cannot generalize well as expected. (2) We conduct empirical analysis to understand key factors that can impact the generalizability. We investigate 3 factors: training data diversity, vocabulary, and locality. Results show that the performance loss on unseen functionalities can be reduced through addressing the out-of-vocabulary problem and increasing training data diversity. (3) We propose a human-in-the-loop mechanism that help adapt neural clone detectors to new code repositories containing lots of unseen functionalities. It improves annotation efficiency with the combination of transfer learning and active learning. Experimental results show that it reduces the amount of annotations by about 88%. Our code and data are publicly available1.",2643-1572,978-1-6654-0337-5,10.1109/ASE51524.2021.9678907,National Key Research and Development Program of China; Nature; ,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9678907,Code Clone Detection;Generalization;Neural Network;Evaluation Methodology;Human-in-the-Loop,Training;Vocabulary;Codes;Annotations;Semantics;Transfer learning;Cloning,learning (artificial intelligence);neural nets;source code (software),current neural clone detectors;training data diversity;neural networks;semantic clones;labeled training data;current evaluation methodology;cross-functionality generalization;specific functionalities;realistic unseen functionalities;transfer learning;active learning,,,,58.0,,20 Jan 2022,,,IEEE,IEEE Conferences
VIVA: Binary Level Vulnerability Identification via Partial Signature,Y. Xiao; Z. Xu; W. Zhang; C. Yu; L. Liu; W. Zou; Z. Yuan; Y. Liu; A. Piao; W. Huo,"Key Laboratory of Network Assessment Technology; School of Computer Science and Engineering, Nanyang Technological University, Singapore; University of Science and Technology of China; Key Laboratory of Network Assessment Technology; Key Laboratory of Network Assessment Technology; Key Laboratory of Network Assessment Technology; Key Laboratory of Network Assessment Technology; School of Computer Science and Engineering, Nanyang Technological University, Singapore; Key Laboratory of Network Assessment Technology; Key Laboratory of Network Assessment Technology","2021 IEEE International Conference on Software Analysis, Evolution and Reengineering (SANER)",11 May 2021,2021,,,213,224,"Binary level code clone detection techniques have been used to identify 1-day vulnerabilities in software. It collects functions with known vulnerabilities and searches for similar functions in the target system. However, existing approaches are limited to detect the same vulnerabilities in different binaries. They can hardly find new recurring vulnerabilities, which share similar logic. Moreover, they only focus on improving the accuracy of binary function matching algorithms while overlooking the presence of security patches, which results in high false-positive rates and requires significant effort to verify the results.To this end, we propose VIVA, a binary level vulnerability and patch semantic summarization and matching tool for accurate recurring vulnerability detection. It uses novel binary program slicing techniques with the aid of pseudo-code trace refinement to generate partial vulnerability and patch signatures, which capture the semantics. It matches the signatures with pre-filtering to efficiently detect 1-day and recurring vulnerabilities. The experimental results show that VIVA outperforms other source code and binary matching tools with a precision of 100% for 1-day vulnerabilities and 87.6% for recurring vulnerabilities and good performance (28.58s per signature search in 4M functions). It detects 92 new vulnerabilities in different series and different versions of real-world projects, with 11 exist without fixing in the latest version.",1534-5351,978-1-7281-9630-5,10.1109/SANER50967.2021.00028,National Natural Science Foundation of China; National Natural Science Foundation of China; ,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9425910,Recurring Vulnerability Detection;Binary Code Matching;Reverse Engineering;Software Security,Conferences;Semantics;Software algorithms;Cloning;Tools;Software;Security,digital signatures;program slicing;security of data;software maintenance,partial vulnerability;patch signatures;recurring vulnerabilities;VIVA;binary matching tools;signature search;binary level vulnerability identification;partial signature;binary level code clone detection techniques;binary function;patch semantic summarization;binary program;pseudocode trace refinement,,,,50.0,,11 May 2021,,,IEEE,IEEE Conferences
Detection of Similar Functions Through the Use of Dominator Information,A. Schäfer; W. Amme; T. S. Heinze,"Institute of Computer Science, Friedrich Schiller University Jena, Jena, Germany; Institute of Computer Science, Friedrich Schiller University Jena, Jena, Germany; German Aerospace Center (DLR), Institute of Data Science, Jena, Germany",2020 IEEE International Conference on Autonomic Computing and Self-Organizing Systems Companion (ACSOS-C),15 Sep 2020,2020,,,206,211,The detection of code clones is an important technique for finding malware and malicious code. Many existing methods work on source code to detect code clones. Recent work in this area has started to focus on the analysis of compiled code to find malicious code. We introduce a new method to detect code clones using Java bytecode and control flow information from dominator trees. A prototype implementation was developed and compared with the state-of-the-art clone detector NiCad to evaluate the basic functionality of the method. First experiments have shown that the method can reliably find Type 1 and Type 2 clones and even find additional clones.,,978-1-7281-8414-2,10.1109/ACSOS-C51401.2020.00057,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9196265,Clone Detection;Malware Detection;Dominator Tree;Control Flow;Path Embedding,Cloning;Malware;Semantics;Syntactics;Tools;Detectors;Java,invasive software;Java,source code;code clone detection;compiled code;malicious code;control flow information;clone detector;dominator information;NiCad;malware;Java bytecode;dominator trees,,3.0,,31.0,,15 Sep 2020,,,IEEE,IEEE Conferences
Modeling Functional Similarity in Source Code with Graph-Based Siamese Networks,N. Mehrotra; N. Agarwal; P. Gupta; S. Anand; D. Lo; R. Purandare,"CSE, Indraprastha Institute of Information Technology Delhi, 243095 Delhi, -- Country other than USA or Canada --, India, (e-mail: nikitam@iiitd.ac.in); Computer Science, Indraprastha Institute of Information Technology Delhi, 243095 New Delhi, Delhi, India, (e-mail: navdha16250@iiitd.ac.in); Computer Science, Indraprastha Institute of Information Technology Delhi, 243095 New Delhi, Delhi, India, (e-mail: piyushgupta.ve@gmail.com); CSE, ECE, Indraprastha Institute of Information Technology, Delhi, New Delhi, Delhi, India, 110020 (e-mail: saket.anand@gmail.com); School of Information Systems, Singapore Management University, Singapore, Singapore, Singapore, 17890 (e-mail: davidlo@smu.edu.sg); Computer Science and Engineering, Indraprastha Institute of Information Technology, 243095 New Delhi, Delhi, India, 110020 (e-mail: purandare@iiitd.ac.in)",IEEE Transactions on Software Engineering,,2021,PP,99.0,1,1,"Code clones are duplicate code fragments that share (nearly) similar syntax or semantics. Code clone detection plays an important role in software maintenance, code refactoring, and reuse. A substantial amount of research has been conducted in the past to detect clones. A majority of these approaches use lexical and syntactic information to detect clones. However, only a few of them target semantic clones. Recently, motivated by the success of deep learning models in other fields, including natural language processing and computer vision, researchers have attempted to adopt deep learning techniques to detect code clones. These approaches use lexical information (tokens) and(or) syntactic structures like abstract syntax trees (ASTs) to detect code clones. However, they do not make sufficient use of the available structural and semantic information, hence limiting their capabilities. This paper addresses the problem of semantic code clone detection using program dependency graphs and geometric neural networks, leveraging the structured syntactic and semantic information. We have developed a prototype tool HOLMES, based on our novel approach and empirically evaluated it on popular code clone benchmarks. Our results show that \tool performs considerably better than the other state-of-the-art tool, TBCCD. We also assessed HOLMES on unseen projects and performed cross dataset experiments to evaluate the generalizability of HOLMES. Our results affirm that HOLMES outperforms TBCCD since most of the pairs that HOLMES detected were either undetected or suboptimally reported by TBCCD.",1939-3520,,10.1109/TSE.2021.3105556,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9516896,Program representation learning;Semantic code clones;graph-based neural networks;siamese neural networks;program dependency graphs,Cloning;Semantics;Syntactics;Deep learning;Arrays;Tools;Neural networks,,,,3.0,,,IEEE,18 Aug 2021,,,IEEE,IEEE Early Access Articles
A Deep Learning Based Approach to Detect Code Clones,G. Li; Y. Tang; X. Zhang; B. Yi,"National Innovation Institute of Defense Technology, Beijing, China; National Innovation Institute of Defense Technology, Beijing, China; National Innovation Institute of Defense Technology, Beijing, China; National Innovation Institute of Defense Technology, Beijing, China",2020 International Conference on Intelligent Computing and Human-Computer Interaction (ICHCI),10 May 2021,2020,,,337,340,"Code clone is a kind of code smells widely exists in practice. Such code smell may lead to serious problems, e.g., code redundancy and code inconsistency. To reduce the negative impact of code clones, researchers have proposed different approaches to detect and remove code clones. However, existing code clone detection approaches mostly rely on manually designed and fine-tuned heuristic rules. Such approaches cannot be exploited in different projects and the precision of them needs to improve further. To this end, this paper proposes a deep learning based approach to detect code clones by statically extracting syntactic features from the ASTs of source files. Evaluation results suggest that the proposed approach is effective in detecting code clones, its precision is around 90%.",,978-1-6654-2316-8,10.1109/ICHCI51889.2020.00078,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9424815,code clone;software quality;deep learning,Deep learning;Human computer interaction;Redundancy;Cloning;Syntactics;Programming;Benchmark testing,deep learning (artificial intelligence);software maintenance;software quality;source code (software),deep learning;code clones detection;code smell;syntactic features extraction;ASTs,,,,30.0,,10 May 2021,,,IEEE,IEEE Conferences
Enhancing DNN-Based Binary Code Function Search With Low-Cost Equivalence Checking,H. Wang; P. Ma; Y. Yuan; Z. Liu; S. Wang; Q. Tang; S. Nie; S. Wu,"CSE, Hong Kong University of Science and Technology, 58207 Kowloon, Clear Water Bay, Hong Kong, (e-mail: hwangdz@cse.ust.hk); CSE, Hong Kong University of Science and Technology, 58207 Kowloon, Clear Water Bay, Hong Kong, (e-mail: pmaab@cse.ust.hk); CSE, Hong Kong University of Science and Technology, 58207 Kowloon, Clear Water Bay, Hong Kong, (e-mail: yyuanaq@cse.ust.hk); CSE, Hong Kong University of Science and Technology, 58207 Kowloon, Clear Water Bay, Hong Kong, (e-mail: zliudc@cse.ust.hk); CSE, HKUST, 58207 Kowloon, Clear Water Bay, Hong Kong, (e-mail: shuaiw@cse.ust.hk); Keen Security Lab, Tencent, 508929 Shanghai, Shanghai, China, (e-mail: dodgetang@tencent.com); Keen Security Lab, Tencent, 508929 Shanghai, Shanghai, China, (e-mail: snie@tencent.com); Keen Security Lab, Tencent, 508929 Shanghai, Shanghai, China, (e-mail: shiwu@tencent.com)",IEEE Transactions on Software Engineering,,2022,PP,99.0,1,1,"Binary code function search has been used as the core basis of various security and software engineering applications, including malware clustering, code clone detection, and vulnerability auditing. However, recognizing logically similar assembly functions remains a challenge. De facto binary code search tools rely on program structure-level information, including control flow and data flow graphs, extracted via standard program analysis techniques or deep neural networks (DNNs). However, DNN-based approaches capture lexical-, control structure-, or data flow-level information of binary code for representation learning, which can be too coarse-grained and does not faithfully denote program functionality. It can also suffer from low robustness to various challenging settings like compiler optimizations and obfuscations. This paper proposes a general solution to enhance the top-k ranked candidates of DNN-based binary code function search. The key idea is to design a low-cost and comprehensive equivalence check, which quickly exposes functionality deviations between the target function and its top-k matched functions. Functions failed this equivalence check can be shaved from the top-k list, whereas functions passing the check can be reconsidered to move ahead on the top-k ranked candidates, in a deliberate way. We design a practical and efficient equivalence check, named BinUSE, using under-constrained symbolic execution (USE). USE, a variant of symbolic execution, improves scalability by launching symbolic execution directly from function entry points and relaxing constraints over function parameters. It alleviates overhead incurred by path explosion and costly constraints. BinUSE is particularly designed to deliver a soundy function-level equivalence check, enhancing DNN-based binary code search by reducing its false alarms with low cost. Our evaluation shows that BinUSE can enable a general and effective enhancement of three DNN-based binary code search tools against challenges introduced by different compilers, optimizations, obfuscations, and architectures.",1939-3520,,10.1109/TSE.2022.3149240,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9707874,Reverse Engineering;Symbolic Execution;Software Similarity;Deep Learning,Binary codes;Standards;Optimization;Task analysis;Malware;Security;Semantics,,,,,,,IEEE,8 Feb 2022,,,IEEE,IEEE Early Access Articles
VUDDY: A Scalable Approach for Vulnerable Code Clone Discovery,S. Kim; S. Woo; H. Lee; H. Oh,"Department of Computer Science and Engineering, Korea University, Seoul, Korea; Department of Computer Science and Engineering, Korea University, Seoul, Korea; Department of Computer Science and Engineering, Korea University, Seoul, Korea; Department of Computer Science and Engineering, Korea University, Seoul, Korea",2017 IEEE Symposium on Security and Privacy (SP),26 Jun 2017,2017,,,595,614,"The ecosystem of open source software (OSS) has been growing considerably in size. In addition, code clones - code fragments that are copied and pasted within or between software systems - are also proliferating. Although code cloning may expedite the process of software development, it often critically affects the security of software because vulnerabilities and bugs can easily be propagated through code clones. These vulnerable code clones are increasing in conjunction with the growth of OSS, potentially contaminating many systems. Although researchers have attempted to detect code clones for decades, most of these attempts fail to scale to the size of the ever-growing OSS code base. The lack of scalability prevents software developers from readily managing code clones and associated vulnerabilities. Moreover, most existing clone detection techniques focus overly on merely detecting clones and this impairs their ability to accurately find ""vulnerable"" clones. In this paper, we propose VUDDY, an approach for the scalable detection of vulnerable code clones, which is capable of detecting security vulnerabilities in large software programs efficiently and accurately. Its extreme scalability is achieved by leveraging function-level granularity and a length-filtering technique that reduces the number of signature comparisons. This efficient design enables VUDDY to preprocess a billion lines of code in 14 hour and 17 minutes, after which it requires a few seconds to identify code clones. In addition, we designed a security-aware abstraction technique that renders VUDDY resilient to common modifications in cloned code, while preserving the vulnerable conditions even after the abstraction is applied. This extends the scope of VUDDY to identifying variants of known vulnerabilities, with high accuracy. In this study, we describe its principles and evaluate its efficacy and effectiveness by comparing it with existing mechanisms and presenting the vulnerabilities it detected. VUDDY outperformed four state-of-the-art code clone detection techniques in terms of both scalability and accuracy, and proved its effectiveness by detecting zero-day vulnerabilities in widely used software systems, such as Apache HTTPD and Ubuntu OS Distribution.",2375-1207,978-1-5090-5533-3,10.1109/SP.2017.62,,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7958600,software vulnerability;vulnerability detection;code clone,Cloning;Scalability;Security;Linux;Kernel;Androids,program diagnostics;public domain software;security of data;source code (software),VUDDY;scalable approach;code clone discovery vulnerability;open source software;OSS;code clones detection;function-level granularity;length-filtering technique;security-aware abstraction technique;zero-day vulnerabilities,,91.0,,45.0,,26 Jun 2017,,,IEEE,IEEE Conferences
