Key,Item Type,Publication Year,Author,Title,Publication Title,ISBN,ISSN,DOI,Url,Abstract Note,Date,Date Added,Date Modified,Access Date,Pages,Num Pages,Issue,Volume,Number Of Volumes,Journal Abbreviation,Short Title,Series,Series Number,Series Text,Series Title,Publisher,Place,Language,Rights,Type,Archive,Archive Location,Library Catalog,Call Number,Extra,Notes,File Attachments,Link Attachments,Manual Tags,Automatic Tags,Editor,Series Editor,Translator,Contributor,Attorney Agent,Book Author,Cast Member,Commenter,Composer,Cosponsor,Counsel,Interviewer,Producer,Recipient,Reviewed Author,Scriptwriter,Words By,Guest,Number,Edition,Running Time,Scale,Medium,Artwork Size,Filing Date,Application Number,Assignee,Issuing Authority,Country,Meeting Name,Conference Name,Court,References,Reporter,Legal Status,Priority Numbers,Programming Language,Version,System,Code,Code Number,Section,Session,Committee,History,Legislative Body
98VMXQJY,conferencePaper,2017,"Hu, Yikun; Zhang, Yuanyuan; Li, Juanru; Gu, Dawu",Binary Code Clone Detection across Architectures and Compiling Configurations,Proceedings of the 25th International Conference on Program Comprehension,978-1-5386-0535-6,,10.1109/ICPC.2017.22,https://doi.org/10.1109/ICPC.2017.22,"Binary code clone detection (or similarity comparison) is a fundamental technique for many important applications, such as plagiarism detection, malware analysis, software vulnerability assessment and program comprehension. With the prevailing of smart and IoT (Internet of Things) devices, more and more programs are ported from traditional desktop platforms (e.g., IA-32) to ARM and MIPS architectures. It becomes imperative to detect cloned binary code across architectures. However, because of incomparable instruction sets of different architectures as well as alternative compiling configurations, it is difficult to conduct a binary code clone detection with traditional syntax- or structure-based methods.To address, we propose a semantics-based approach to fulfill the target. We recognize arguments and indirect jump targets of each binary function, and emulate executions of those functions, extracting semantic signatures to measure the similarity of functions. The approach has been implemented in a prototype system named CACompare to detect cloned binary functions across architectures and compiling configurations. It supports comparisons between mainstream architectures (IA-32, ARM and MIPS) and is able to analyse binaries on the Linux platform. The experimental results show that CACompare not only is effective in dealing with binaries of different architectures and variant compiling configurations, but also improves the accuracy of binary code clone detection comparing to state-of-the-art solutions.",2017,2022-10-16 23:12:58,2022-10-16 23:12:58,,88–98,,,,,,,ICPC '17,,,,IEEE Press,,,,,,,,,"event-place: Buenos Aires, Argentina",,,,code clone detection; binary program analysis; reverse engineering; static analysis,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
UIWF3QC5,conferencePaper,2022,"Huang, Cheng; Zhou, Hui; Ye, Chunyang; Li, Bingzhuo",Code Clone Detection Based on Event Embedding and Event Dependency,Proceedings of the 13th Asia-Pacific Symposium on Internetware,978-1-4503-9780-3,,10.1145/3545258.3545277,https://doi.org/10.1145/3545258.3545277,"The code clone detection method based on semantic similarity has important value in software engineering tasks (e.g., software evolution, software reuse). Traditional code clone detection technologies pay more attention to the similarity of code at the syntax level, and less attention to the semantic similarity of the code. As a result, candidate codes similar in semantics are ignored. To address this issue, we propose a code clone detection method based on semantic similarity. By treating code as a series of interdependent events that occur continuously, we design a model namely EDAM to encode code semantic information based on event embedding and event dependency. The EDAM model uses the event embedding method to model the execution characteristics of program statements and the data dependence information between all statements. In this way, we can embed the program semantic information into a vector and use the vector to detect codes similar in semantics. Experimental results show that the performance of our EDAM model is superior to state-of-the-art open source models for code clone detection.",2022,2022-10-16 23:12:58,2022-10-16 23:12:58,,65–74,,,,,,,Internetware '22,,,,Association for Computing Machinery,"New York, NY, USA",,,,,,,,"event-place: Hohhot, China",,,,code clone detection; event dependency; event embedding,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
6HL2Q9CZ,conferencePaper,2020,"Svacina, Jan; Simmons, Jonathan; Cerny, Tomas",Semantic Code Clone Detection for Enterprise Applications,Proceedings of the 35th Annual ACM Symposium on Applied Computing,978-1-4503-6866-7,,10.1145/3341105.3374117,https://doi.org/10.1145/3341105.3374117,"Enterprise systems are widely adopted across industries as methods of solving complex problems. As software complexity increases, the software's codebase becomes harder to manage and maintenance costs raise significantly. One such source of cost-raising complexity and code bloat is that of code clones. We proposed an approach to identify semantic code clones in enterprise frameworks by using control flow graphs (CFGs) and applying various proprietary similarity functions to compare enterprise targeted metadata for each pair of CFGs. This approach enables us to detect semantic code clones with high accuracy within a time complexity of O(n2) where n is equal to the number of CFGs composed in the enterprise application (usually around hundreds). We demonstrated our solution on a blind study utilizing a production enterprise application.",2020,2022-10-16 23:12:58,2022-10-16 23:12:58,,129–131,,,,,,,SAC '20,,,,Association for Computing Machinery,"New York, NY, USA",,,,,,,,"event-place: Brno, Czech Republic",,,,code clone detection; enterprise software; semantic clone; software engineering; source code analysis,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
GLTJB5T5,journalArticle,2020,"Walker, Andrew; Cerny, Tomas",On Cloud Computing Infrastructure for Existing Code-Clone Detection Algorithms,SIGAPP Appl. Comput. Rev.,,1559-6915,10.1145/3392350.3392351,https://doi.org/10.1145/3392350.3392351,"Microservice Architecture (MSA) is becoming a design standard for modern cloud-based software systems. However, even though cloud-based applications have been thoroughly explored with regards to networking, scalability, and decomposition of existing monolithic applications into MSA based applications, not much research has been done showing the viability of MSA in new problem domains. In this paper, we explore the application of MSA to the code-clone detection problem domain to identify any improvements that can be made over existing local code-clone detection applications. A fragment of source code that is identical or similar to another is a code-clone. Code-clones make it difficult to maintain applications as they create multiple points within the code that bugs must be fixed, new rules enforced, or design decisions imposed. As applications grow larger and larger, the pervasiveness of code-clones likewise grows. To face the code-clone related issues, many tools and algorithms have been proposed to find and document code-clones within an application. In this paper, we show that many improvements can be made by utilizing emerging cloud-based technologies.",2020-04,2022-10-16 23:12:58,2022-10-16 23:12:58,,5–14,,1.0,20.0,,,,,,,,,,,,,,,,,"Place: New York, NY, USA Publisher: Association for Computing Machinery",,,,clone detection; cloud computing; code clone; microservices; scalable code clone detection; software as a service,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
XMFR8TRI,conferencePaper,2020,"Fang, Chunrong; Liu, Zixi; Shi, Yangyang; Huang, Jeff; Shi, Qingkai",Functional Code Clone Detection with Syntax and Semantics Fusion Learning,Proceedings of the 29th ACM SIGSOFT International Symposium on Software Testing and Analysis,978-1-4503-8008-9,,10.1145/3395363.3397362,https://doi.org/10.1145/3395363.3397362,"Clone detection of source code is among the most fundamental software engineering techniques. Despite intensive research in the past decade, existing techniques are still unsatisfactory in detecting ""functional"" code clones. In particular, existing techniques cannot efficiently extract syntax and semantics information from source code. In this paper, we propose a novel joint code representation that applies fusion embedding techniques to learn hidden syntactic and semantic features of source codes. Besides, we introduce a new granularity for functional code clone detection. Our approach regards the connected methods with caller-callee relationships as a functionality and the method without any caller-callee relationship with other methods represents a single functionality. Then we train a supervised deep learning model to detect functional code clones. We conduct evaluations on a large dataset of C++ programs and the experimental results show that fusion learning can significantly outperform the state-of-the-art techniques in detecting functional code clones.",2020,2022-10-16 23:12:58,2022-10-16 23:12:58,,516–527,,,,,,,ISSTA 2020,,,,Association for Computing Machinery,"New York, NY, USA",,,,,,,,"event-place: Virtual Event, USA",,,,Code clone detection; code representation; functional clone detection; syntax and semantics fusion learning,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
RAGQNY2A,conferencePaper,2019,"Ul Ain, Qurat; Azam, Farooque; Anwar, Muhammad Waseem; Kiran, Ayesha",A Model-Driven Approach for Token Based Code Clone Detection Techniques - An Introduction to UMLCCD,Proceedings of the 2019 8th International Conference on Educational and Information Technology,978-1-4503-6267-2,,10.1145/3318396.3318440,https://doi.org/10.1145/3318396.3318440,"Reusing code through copy and paste is a well-known process in software development. The replicated code is known as code clone and the process is known as code cloning. Software clones can cause bug propagation and severe issues related to maintenance. Code clone detection process consist of many steps, which is complex to some extent for user to perform. Therefore, we are trying to propose a generic approach for code clone detection approaches at model level. This study particularly presents Unified Modeling Language profile for Code Clone Detection (UMLCCD) to model the process of token-based code clone detection approaches as token-based approaches has good execution time while maintaining high precision and recall. It automate the clone detection process of token-based approaches which is helpful for user because user simply gives input and whole process is done automatically. It can be used for source code of various programming languages. The proposed UML profile provides the bases to transform the UMLCCD source model into required text. The applicability of UMLCCD is validated by taking 484 lines of source code of Library Management System case study.",2019,2022-10-16 23:12:58,2022-10-16 23:12:58,,312–317,,,,,,,ICEIT 2019,,,,Association for Computing Machinery,"New York, NY, USA",,,,,,,,"event-place: Cambridge, United Kingdom",,,,Code clone detection; MDA; Token based approaches; UMLCCD,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
83A2IP8B,conferencePaper,2022,"Huang, Jun",Code Clone Detection Based on Doc2vec Model and Bagging,Proceedings of the 2022 2nd International Conference on Control and Intelligent Robotics,978-1-4503-9717-9,,10.1145/3548608.3559280,https://doi.org/10.1145/3548608.3559280,"For software analysis and maintenance, the code clone detection has an important role. In order to improve the detection rate of code clone, this paper proposes a code cloning detection method based on Doc2vec model and bagging. Firstly, method converts the code into token sequence and abstract syntax tree sequence. Then, the Doc2vec model is used to learn the lexical and grammatical information of the code respectively. Finally, bagging algorithm is used to detect the cloning of code pairs. The results show that the accuracy and recall of the code clone detection method based on Doc2vec model and bagging is better than that of sourcerercc and tree LSTM on bigclonebench data set.",2022,2022-10-16 23:12:58,2022-10-16 23:12:58,,649–653,,,,,,,ICCIR '22,,,,Association for Computing Machinery,"New York, NY, USA",,,,,,,,"event-place: Nanjing, China",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
GPV9LPE4,journalArticle,2020,"Walker, Andrew; Cerny, Tomas; Song, Eungee","Open-Source Tools and Benchmarks for Code-Clone Detection: Past, Present, and Future Trends",SIGAPP Appl. Comput. Rev.,,1559-6915,10.1145/3381307.3381310,https://doi.org/10.1145/3381307.3381310,"A fragment of source code that is identical or similar to another is a code-clone. Code-clones make it difficult to maintain applications as they create multiple points within the code that bugs must be fixed, new rules enforced, or design decisions imposed. As applications grow larger and larger, the pervasiveness of code-clones likewise grows. To face the code-clone related issues, many tools and algorithms have been proposed to find and document code-clones within an application. In this paper, we present the historical trends in code-clone detection tools to show how we arrived at the current implementations. We then present our results from a systematic mapping study on current (2009-2019) code-clone detection tools with regards to technique, open-source nature, and language coverage. Lastly, we propose future directions for code-clone detection tools. This paper provides the essentials to understanding the code-clone detection process and the current state-of-art solutions.",2020-01,2022-10-16 23:12:58,2022-10-16 23:12:58,,28–39,,4.0,19.0,,,,,,,,,,,,,,,,,"Place: New York, NY, USA Publisher: Association for Computing Machinery",,,,clone detection; code clone; mapping study; survey,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AAZ7U9UX,conferencePaper,2019,"Elkhail, Abdulrahman Abu; Svacina, Jan; Cerny, Tomas",Intelligent Token-Based Code Clone Detection System for Large Scale Source Code,Proceedings of the Conference on Research in Adaptive and Convergent Systems,978-1-4503-6843-8,,10.1145/3338840.3355654,https://doi.org/10.1145/3338840.3355654,"A code clone refers to code fragments in the source code that are identical or similar to each other. Code clones lead difficulties in software maintenance, bug fixing, present poor design and increase the system size. Code clone detection techniques and tools have been proposed by many researchers, however, there is a lack of clone detection techniques especially for large scale repositories. In this paper, we present a token-based clone detector called Intelligent Clone Detection Tool (ICDT) that can detect both exact and near-miss clones from large repositories using a standard workstation environment. In order to evaluate the scalability and the efficiency of ICDT, we use the most recent benchmark which is a big benchmark of real clones, BigCloneBench. In addition, we compare ICDT to four publicly available and state-of-the-art tools.",2019,2022-10-16 23:12:58,2022-10-16 23:12:58,,256–260,,,,,,,RACS '19,,,,Association for Computing Machinery,"New York, NY, USA",,,,,,,,"event-place: Chongqing, China",,,,clone detection; code clone; BigCloneBench; case study,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
8FTUWLZA,conferencePaper,2019,"Nafi, Kawser Wazed; Kar, Tonny Shekha; Roy, Banani; Roy, Chanchal K.; Schneider, Kevin A.",CLCDSA: Cross Language Code Clone Detection Using Syntactical Features and API Documentation,Proceedings of the 34th IEEE/ACM International Conference on Automated Software Engineering,978-1-72812-508-4,,10.1109/ASE.2019.00099,https://doi.org/10.1109/ASE.2019.00099,"Software clones are detrimental to software maintenance and evolution and as a result many clone detectors have been proposed. These tools target clone detection in software applications written in a single programming language. However, a software application may be written in different languages for different platforms to improve the application's platform compatibility and adoption by users of different platforms. Cross language clones (CLCs) introduce additional challenges when maintaining multi-platform applications and would likely go undetected using existing tools. In this paper, we propose CLCDSA, a cross language clone detector which can detect CLCs without extensive processing of the source code and without the need to generate an intermediate representation. The proposed CLCDSA model analyzes different syntactic features of source code across different programming languages to detect CLCs. To support large scale clone detection, the CLCDSA model uses an action filter based on cross language API call similarity to discard non-potential clones. The design methodology of CLCDSA is twofold: (a) it detects CLCs on the fly by comparing the similarity of features, and (b) it uses a deep neural network based feature vector learning model to learn the features and detect CLCs. Early evaluation of the model observed an average precision, recall and F-measure score of 0.55, 0.86, and 0.64 respectively for the first phase and 0.61, 0.93, and 0.71 respectively for the second phase which indicates that CLCDSA outperforms all available models in detecting cross language clones.",2019,2022-10-16 23:12:58,2022-10-16 23:12:58,,1026–1037,,,,,,,ASE '19,,,,IEEE Press,,,,,,,,,"event-place: San Diego, California",,,,code clone; API documentation; source code syntax; Word2Vector,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
WRF6UWP3,conferencePaper,2019,"Dann, Andreas; Hermann, Ben; Bodden, Eric",SootDiff: Bytecode Comparison across Different Java Compilers,Proceedings of the 8th ACM SIGPLAN International Workshop on State Of the Art in Program Analysis,978-1-4503-6720-2,,10.1145/3315568.3329966,https://doi.org/10.1145/3315568.3329966,"Different Java compilers and compiler versions, e.g., javac or ecj, produce different bytecode from the same source code. This makes it hard to trace if the bytecode of an open-source library really matches the provided source code. Moreover, it prevents one from detecting which open-source libraries have been re-compiled and rebundled into a single jar, which is a common way to distribute an application. Such rebundling is problematic because it prevents one to check if the jar file contains open-source libraries with known vulnerabilities. To cope with these problems, we propose the tool SootDiff that uses Soot's intermediate representation Jimple, in combination with code clone detection techniques, to reduce dissimilarities introduced by different compilers, and to identify clones. Our results show that SootDiff successfully identifies clones in 102 of 144 cases, whereas bytecode comparison succeeds in 58 cases only.",2019,2022-10-16 23:12:58,2022-10-16 23:12:58,,14–19,,,,,,,SOAP 2019,,,,Association for Computing Machinery,"New York, NY, USA",,,,,,,,"event-place: Phoenix, AZ, USA",,,,Code Clone Detection; Intermediate Representation; Static Analysis,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
K5SA3L3D,conferencePaper,2017,"Duan, Ruian; Bijlani, Ashish; Xu, Meng; Kim, Taesoo; Lee, Wenke",Identifying Open-Source License Violation and 1-Day Security Risk at Large Scale,Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security,978-1-4503-4946-8,,10.1145/3133956.3134048,https://doi.org/10.1145/3133956.3134048,"With millions of apps available to users, the mobile app market is rapidly becoming very crowded. Given the intense competition, the time to market is a critical factor for the success and profitability of an app. In order to shorten the development cycle, developers often focus their efforts on the unique features and workflows of their apps and rely on third-party Open Source Software (OSS) for the common features. Unfortunately, despite their benefits, careless use of OSS can introduce significant legal and security risks, which if ignored can not only jeopardize security and privacy of end users, but can also cause app developers high financial loss. However, tracking OSS components, their versions, and interdependencies can be very tedious and error-prone, particularly if an OSS is imported with little to no knowledge of its provenance.We therefore propose OSSPolice, a scalable and fully-automated tool for mobile app developers to quickly analyze their apps and identify free software license violations as well as usage of known vulnerable versions of OSS. OSSPolice introduces a novel hierarchical indexing scheme to achieve both high scalability and accuracy, and is capable of efficiently comparing similarities of app binaries against a database of hundreds of thousands of OSS sources (billions of lines of code). We populated OSSPolice with 60K C/C++ and 77K Java OSS sources and analyzed 1.6M free Google Play Store apps. Our results show that 1) over 40K apps potentially violate GPL/AGPL licensing terms, and 2) over 100K of apps use known vulnerable versions of OSS. Further analysis shows that developers violate GPL/AGPL licensing terms due to lack of alternatives, and use vulnerable versions of OSS despite efforts from companies like Google to improve app security. OSSPolice is available on GitHub.",2017,2022-10-16 23:12:58,2022-10-16 23:12:58,,2169–2185,,,,,,,CCS '17,,,,Association for Computing Machinery,"New York, NY, USA",,,,,,,,"event-place: Dallas, Texas, USA",,,,code clone detection; application security; license violation,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
C3M2UPPX,journalArticle,2022,"Yu, Hao; Hu, Xing; Li, Ge; Li, Ying; Wang, Qianxiang; Xie, Tao",Assessing and Improving an Evaluation Dataset for Detecting Semantic Code Clones via Deep Learning,ACM Trans. Softw. Eng. Methodol.,,1049-331X,10.1145/3502852,https://doi.org/10.1145/3502852,"In recent years, applying deep learning to detect semantic code clones has received substantial attention from the research community. Accordingly, various evaluation benchmark datasets, with the most popular one as BigCloneBench, are constructed and selected as benchmarks to assess and compare different deep learning models for detecting semantic clones. However, there is no study to investigate whether an evaluation benchmark dataset such as BigCloneBench is properly used to evaluate models for detecting semantic code clones. In this article, we present an experimental study to show that BigCloneBench typically includes semantic clone pairs that use the same identifier names, which however are not used in non-semantic-clone pairs. Subsequently, we propose an undesirable-by-design Linear-Model that considers only which identifiers appear in a code fragment; this model can achieve high effectiveness for detecting semantic clones when evaluated on BigCloneBench, even comparable to state-of-the-art deep learning models recently proposed for detecting semantic clones. To alleviate these issues, we abstract a subset of the identifier names (including type, variable, and method names) in BigCloneBench to result in AbsBigCloneBench and use AbsBigCloneBench to better assess the effectiveness of deep learning models on the task of detecting semantic clones.",2022-07,2022-10-16 23:12:58,2022-10-16 23:12:58,,,,4.0,31.0,,,,,,,,,,,,,,,,,"Place: New York, NY, USA Publisher: Association for Computing Machinery",,,,deep learning; Code clone detection; dataset collection,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
4HCLKFD7,conferencePaper,2019,"Wang, Cong; Gao, Jian; Jiang, Yu; Xing, Zhenchang; Zhang, Huafeng; Yin, Weiliang; Gu, Ming; Sun, Jiaguang",Go-Clone: Graph-Embedding Based Clone Detector for Golang,Proceedings of the 28th ACM SIGSOFT International Symposium on Software Testing and Analysis,978-1-4503-6224-5,,10.1145/3293882.3338996,https://doi.org/10.1145/3293882.3338996,"Golang (short for Go programming language) is a fast and compiled language, which has been increasingly used in industry due to its excellent performance on concurrent programming. Golang redefines concurrent programming grammar, making it a challenge for traditional clone detection tools and techniques. However, there exist few tools for detecting duplicates or copy-paste related bugs in Golang. Therefore, an effective and efficient code clone detector on Golang is especially needed. In this paper, we present Go-Clone, a learning-based clone detector for Golang. Go-Clone contains two modules – the training module and the user interaction module. In the training module, firstly we parse Golang source code into llvm IR (Intermediate Representation). Secondly, we calculate LSFG (labeled semantic flow graph) for each program function automatically. Go-Clone trains a deep neural network model to encode LSFGs for similarity classification. In the user interaction module, users can choose one or more Golang projects. Go-Clone identifies and presents a list of function pairs, which are most likely clone code for user inspection. To evaluate Go-Clone's performance, we collect 6,110 commit versions from 48 Github projects to construct a Golang clone detection data set. Go-Clone can reach the value of AUC (Area Under Curve) and ACC (Accuracy) for 89.61% and 83.80% in clone detection. By testing several groups of unfamiliar data, we also demonstrates the generility of Go-Clone. The address of the abstract demo video: https://youtu.be/o5DogtYGbeo",2019,2022-10-16 23:12:58,2022-10-16 23:12:58,,374–377,,,,,,,ISSTA 2019,,,,Association for Computing Machinery,"New York, NY, USA",,,,,,,,"event-place: Beijing, China",,,,code clone detection; code similarity; deep neural network; go programming language,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
HABYMIKD,conferencePaper,2021,"Liu, Chenyao; Lin, Zeqi; Lou, Jian-Guang; Wen, Lijie; Zhang, Dongmei",Can Neural Clone Detection Generalize to Unseen Functionalities?,Proceedings of the 36th IEEE/ACM International Conference on Automated Software Engineering,978-1-66540-337-5,,10.1109/ASE51524.2021.9678907,https://doi.org/10.1109/ASE51524.2021.9678907,"Many recently proposed code clone detectors exploit neural networks to capture latent semantics of source code, thus achieving impressive results for detecting semantic clones. These neural clone detectors rely on the availability of large amounts of labeled training data. We identify a key oversight in the current evaluation methodology for neural clone detection: cross-functionality generalization (i.e., detecting semantic clones of which the functionalities are unseen in training). Specifically, we focus on this question: do neural clone detectors truly learn the ability to detect semantic clones, or they just learn how to model specific functionalities in training data while cannot generalize to realistic unseen functionalities? This paper investigates how the generalizability can be evaluated and improved.Our contributions are 3-folds: (1) We propose an evaluation methodology that can systematically measure the cross-functionality generalizability of neural clone detection. Based on this evaluation methodology, an empirical study is conducted and the results indicate that current neural clone detectors cannot generalize well as expected. (2) We conduct empirical analysis to understand key factors that can impact the generalizability. We investigate 3 factors: training data diversity, vocabulary, and locality. Results show that the performance loss on unseen functionalities can be reduced through addressing the out-of-vocabulary problem and increasing training data diversity. (3) We propose a human-in-the-loop mechanism that help adapt neural clone detectors to new code repositories containing lots of unseen functionalities. It improves annotation efficiency with the combination of transfer learning and active learning. Experimental results show that it reduces the amount of annotations by about 88%. Our code and data are publicly available1.",2021,2022-10-16 23:12:58,2022-10-16 23:12:58,,617–629,,,,,,,ASE '21,,,,IEEE Press,,,,,,,,,"event-place: Melbourne, Australia",,,,code clone detection; neural network; evaluation methodology; generalization; human-in-the-loop,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
GJA2FAEP,conferencePaper,2020,"Mathew, George; Parnin, Chris; Stolee, Kathryn T",SLACC: Simion-Based Language Agnostic Code Clones,Proceedings of the ACM/IEEE 42nd International Conference on Software Engineering,978-1-4503-7121-6,,10.1145/3377811.3380407,https://doi.org/10.1145/3377811.3380407,"Successful cross-language clone detection could enable researchers and developers to create robust language migration tools, facilitate learning additional programming languages once one is mastered, and promote reuse of code snippets over a broader codebase. However, identifying cross-language clones presents special challenges to the clone detection problem. A lack of common underlying representation between arbitrary languages means detecting clones requires one of the following solutions: 1) a static analysis framework replicated across each targeted language with annotations matching language features across all languages, or 2) a dynamic analysis framework that detects clones based on runtime behavior.In this work, we demonstrate the feasibility of the latter solution, a dynamic analysis approach called SLACC for cross-language clone detection. Like prior clone detection techniques, we use input/output behavior to match clones, though we overcome limitations of prior work by amplifying the number of inputs and covering more data types; and as a result, achieve better clusters than prior attempts. Since clusters are generated based on input/output behavior, SLACC supports cross-language clone detection. As an added challenge, we target a static typed language, Java, and a dynamic typed language, Python. Compared to HitoshiIO, a recent clone detection tool for Java, SLACC retrieves 6 times as many clusters and has higher precision (86.7% vs. 30.7%).This is the first work to perform clone detection for dynamic typed languages (precision = 87.3%) and the first to perform clone detection across languages that lack a common underlying representation (precision = 94.1%). It provides a first step towards the larger goal of scalable language migration tools.",2020,2022-10-16 23:12:58,2022-10-16 23:12:58,,210–221,,,,,,,ICSE '20,,,,Association for Computing Machinery,"New York, NY, USA",,,,,,,,"event-place: Seoul, South Korea",,,,cross-language analysis; semantic code clone detection,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
3BYA4M6Y,conferencePaper,2017,"Matsushita, Tsubasa; Sasano, Isao",Detecting Code Clones with Gaps by Function Applications,Proceedings of the 2017 ACM SIGPLAN Workshop on Partial Evaluation and Program Manipulation,978-1-4503-4721-1,,10.1145/3018882.3018892,https://doi.org/10.1145/3018882.3018892,"Code clones are pairs or groups of code segments which are identical or similar to each other. Generally the existence of code clones is considered to make it cumbersome to maintain the source code, so that various kinds of code clone detection tools have been developed. Simple ones divide the source code into a sequence of lines or tokens and find identical or similar sub-sequences. Differences among code clones, called gaps, may prevent clones from being detected or may make clones to be detected with being fragmented. In order to cope with gaps, various tools have been developed by using abstract syntax trees, comparing some metrics, or using program dependency graphs. In this paper we present a novel algorithm for detecting clones by focusing on gaps by function applications. Based on the algorithm we have implemented a tool for detecting code clones on programs written in Standard ML.",2017,2022-10-16 23:12:59,2022-10-16 23:12:59,,12–22,,,,,,,PEPM 2017,,,,Association for Computing Machinery,"New York, NY, USA",,,,,,,,"event-place: Paris, France",,,,code clone; abstract syntax tree; function application; gap,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
FQ4IPPNU,conferencePaper,2018,"Xue, Hongfa; Venkataramani, Guru; Lan, Tian",Clone-Slicer: Detecting Domain Specific Binary Code Clones through Program Slicing,Proceedings of the 2018 Workshop on Forming an Ecosystem Around Software Transformation,978-1-4503-5997-9,,10.1145/3273045.3273047,https://doi.org/10.1145/3273045.3273047,"In this paper, we presented a novel framework, Clone-Slicer, a domain-specific code clone detector for binary executables, that integrates program slicing and a deep learning based binary code clone modeling framework to improve the number of code clone detected. In particular, we chose pointer analysis for memory safety as our example domain to demonstrate the usefulness of our approach. We evaluated our approach using real-world applications from SPEC 2006 benchmark suite. Our results show Clone-Slicer is able to detect up to 43.64% code clones compared to prior work and further cut the time-to-solution (the time spent to verify memory bound safety) for Clone-Slicer by 32.96% compared to Clone-Hunter. As future work, we plan to apply Clone-Slicer to different domains and tasks, such as vulnerable program path discovery, and further improve the capability for code clone detection through advanced clustering algorithms. We will also study the cost-benefit tradeoffs of using such advanced algorithms.",2018,2022-10-16 23:12:59,2022-10-16 23:12:59,,27–33,,,,,,,FEAST '18,,,,Association for Computing Machinery,"New York, NY, USA",,,,,,,,"event-place: Toronto, Canada",,,,machine learning; binary analysis; code clones; program slicing,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
IKBZ9P36,conferencePaper,2018,"Saini, Vaibhav; Farmahinifarahani, Farima; Lu, Yadong; Baldi, Pierre; Lopes, Cristina V.",Oreo: Detection of Clones in the Twilight Zone,Proceedings of the 2018 26th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering,978-1-4503-5573-5,,10.1145/3236024.3236026,https://doi.org/10.1145/3236024.3236026,"Source code clones are categorized into four types of increasing difficulty of detection, ranging from purely textual (Type-1) to purely semantic (Type-4). Most clone detectors reported in the literature work well up to Type-3, which accounts for syntactic differences. In between Type-3 and Type-4, however, there lies a spectrum of clones that, although still exhibiting some syntactic similarities, are extremely hard to detect – the Twilight Zone. Most clone detectors reported in the literature fail to operate in this zone. We present Oreo, a novel approach to source code clone detection that not only detects Type-1 to Type-3 clones accurately, but is also capable of detecting harder-to-detect clones in the Twilight Zone. Oreo is built using a combination of machine learning, information retrieval, and software metrics. We evaluate the recall of Oreo on BigCloneBench, and perform manual evaluation for precision. Oreo has both high recall and precision. More importantly, it pushes the boundary in detection of clones with moderate to weak syntactic similarity in a scalable manner",2018,2022-10-16 23:12:59,2022-10-16 23:12:59,,354–365,,,,,,,ESEC/FSE 2018,,,,Association for Computing Machinery,"New York, NY, USA",,,,,,,,"event-place: Lake Buena Vista, FL, USA",,,,Clone detection; Machine Learning; Software Metrics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CC9R9B8Q,conferencePaper,2020,"Alomari, Hakam W.; Stephan, Matthew",SrcClone: Detecting Code Clones via Decompositional Slicing,Proceedings of the 28th International Conference on Program Comprehension,978-1-4503-7958-8,,10.1145/3387904.3389271,https://doi.org/10.1145/3387904.3389271,"Detecting code clones is an established method for comprehending and maintaining systems. One important but challenging form of code clone detection involves detecting semantic clones, which are those that are semantically similar code segments that differ syntactically. Existing approaches to semantic clone detection do not scale well to large code bases and have room for improvement in their precision and recall. In this paper, we present a scalable slicing-based approach for detecting code clones, including semantic clones. We determine code segment similarity based on their corresponding program slices. We take advantage of a lightweight, publicly available, and scalable program slicing approach to compute the necessary information. Our approach uses dependency analysis to find and measure cloned elements, and provides insights into elements of the code that are affected by an entire clone set/class. We have implemented our approach as a tool called srcClone. We evaluate it by comparing it to two semantic clone detectors in terms of clones, performance, and scalability; and perform recall and precision analysis using established benchmark scenarios. In our evaluation, we illustrate our approach is both relatively scalable and accurate. srcClone can also be used by program analysts to run on non-compilable and incomplete source code, which serves comprehension and maintenance tasks very well. We believe our approach is an important advancement in program comprehension that can help improve clone detection practices and provide developers greater insights into their software.",2020,2022-10-16 23:12:59,2022-10-16 23:12:59,,274–284,,,,,,,ICPC '20,,,,Association for Computing Machinery,"New York, NY, USA",,,,,,,,"event-place: Seoul, Republic of Korea",,,,Clone detection; Code clone; Program slicing; Semantic clones,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BSZQGEER,conferencePaper,2020,"Wu, Yueming; Zou, Deqing; Dou, Shihan; Yang, Siru; Yang, Wei; Cheng, Feng; Liang, Hong; Jin, Hai",SCDetector: Software Functional Clone Detection Based on Semantic Tokens Analysis,Proceedings of the 35th IEEE/ACM International Conference on Automated Software Engineering,978-1-4503-6768-4,,10.1145/3324884.3416562,https://doi.org/10.1145/3324884.3416562,"Code clone detection is to find out code fragments with similar functionalities, which has been more and more important in software engineering. Many approaches have been proposed to detect code clones, in which token-based methods are the most scalable but cannot handle semantic clones because of the lack of consideration of program semantics. To address the issue, researchers conduct program analysis to distill the program semantics into a graph representation and detect clones by matching the graphs. However, such approaches suffer from low scalability since graph matching is typically time-consuming.In this paper, we propose SCDetector to combine the scalability of token-based methods with the accuracy of graph-based methods for software functional clone detection. Given a function source code, we first extract the control flow graph by static analysis. Instead of using traditional heavyweight graph matching, we treat the graph as a social network and apply social-network-centrality analysis to dig out the centrality of each basic block. Then we assign the centrality to each token in a basic block and sum the centrality of the same token in different basic blocks. By this, a graph is turned into certain tokens with graph details (i.e., centrality), called semantic tokens. Finally, these semantic tokens are fed into a Siamese architecture neural network to train a code clone detector. We evaluate SCDetector on two large datasets of functionally similar code. Experimental results indicate that our system is superior to four state-of-the-art methods (i.e., SourcererCC, Deckard, RtvNN, and ASTNN) and the time cost of SCDetector is 14 times less than a traditional graph-based method (i.e., CCSharp) on detecting semantic clones.",2020,2022-10-16 23:12:59,2022-10-16 23:12:59,,821–833,,,,,,,ASE '20,,,,Association for Computing Machinery,"New York, NY, USA",,,,,,,,"event-place: Virtual Event, Australia",,,,semantic tokens; siamese network; social network centrality,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
